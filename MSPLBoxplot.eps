%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: boxplot-eps-converted-to.pdf
%%Creator: Adobe Acrobat 10.0.0
%%For: Anderson
%%CreationDate: 25/05/2015, 10:34:15
%%BoundingBox: 0 0 436 160
%%HiResBoundingBox: 0 0 436 160
%%CropBox: 0 0 436 160
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$None SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 1059 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.2-c001 63.139439, 2010/09/27-13:37:26        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
    xmlns:dc="http://purl.org/dc/elements/1.1/"
   pdf:Producer="MiKTeX GPL Ghostscript  9.0"
   xmp:ModifyDate="2015-05-25T10:33:56-03:00"
   xmp:CreateDate="2014-09-09T21:09:59-03:00"
   xmp:CreatorTool="Adobe Acrobat 8.0"
   xmp:MetadataDate="2015-05-25T10:33:56-03:00"
   xmpMM:DocumentID="4d3af225-3ada-11e4-0000-f98c0792ba75"
   xmpMM:InstanceID="uuid:97fd116c-348f-4736-b2e8-8c669af4ad57"
   dc:format="application/pdf">
   <dc:title>
    <rdf:Alt>
     <rdf:li xml:lang="x-default">Workbook1.pdf</rdf:li>
    </rdf:Alt>
   </dc:title>
   <dc:creator>
    <rdf:Seq>
     <rdf:li>Anderson</rdf:li>
    </rdf:Seq>
   </dc:creator>
  </rdf:Description>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Core/capture_mysetup gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
Adobe_AGM_Core/ps gx
gsave
/0 
[/DeviceCMYK] /CSA add_res
grestore
Adobe_AGM_Core/pt gx
%%EndPageSetup
1 -1 scale 0 -160 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 160 li
436 160 li
436 0 li
cp
clp
gsave
0 .0310059 mo
0 160 li
435.898 160 li
435.898 .0310059 li
cp
clp
0 160 mo
214.903 160 li
214.903 -1.52588e-5 li
0 -1.52588e-5 li
cp
false sop
/0 
<<
/Name (Black)
/1 
[/DeviceCMYK] /CSA add_res
/CSA /1 get_csa_by_name
/MappedCSA /1 /CSA get_res
/TintMethod /Subtractive
/TintProc null
/NComponents 4 
/Components [ 0 0 0 1 ] 
>>
/CSD add_res
1 /0 /CSD get_res sepcs
0 sep
f
1 /0 /CSD get_res sepcs
1 sep
%ADOBeginSubsetFont: PBAAAA+ArialMT Initial
ct_T42Dict begin
-0.664 -0.324 2 1.004
 256 array 0 1 255 {1 index exch /.notdef put} for  /PBAAAA+ArialMT
Type42DictBegin
[<00010000000c000c000c000c4f532f3200000000000000cc000000566376
7420a11cd7eb00000124000006546670676dcc79599a000007780000066e
676c796600000000000040a40000598c68656164de7154f000000de80000
0036686865611233162200000e2000000024686d74780000000000000e44
0000016c6c6f63610000000000000fb000001ab46d61787012b40d800000
2a64000000206e616d65e9a8cdc800002a8400000a607072657025d64dbf
000034e400000bbe67646972000000000000000000000000000100000190
000500080000000000000000000000000000000000000000000000000000
00000000000000000000000000080000000000000000000000000000f000
f0ff000000000000000000000000000100000000000005ba001905ba001a
05a70019042600180000ffe70000ffe80000ffe7fe69ffe805ba0019fe69
ffe802ea000000b8000000b80000000000a800ad016900ad00bf00c201f0
001800af00b900b400c800170044009c007c009400870006005a00c80089
005200520005004400940119ffb4002f00a1000300a100cd00170057007e
00ba00160118ffe9007f008503d300870085000d002200410050006f008d
014cff75005c00df04830037004c006e00700180ff58ff8eff92ffa400a5
00b903c8fffd000b001a0063006300cdffee05d8ffdc002d005c00950099
00df019209b500400057008000b9039d0072009a035d0401ff67fffa0003
0021007700cd0004004d00cd01c0022b004c006500e70118017c034305d8
ffa3ffb0ffc40003001c005d0068009a00ba013501470221055cff4dffcd
0016002d00780080009900b200b600b600b800bd00da010c05f0ffa4fff0
0019002c0049007f00b400ce01c003fefd81fe3f00000005001800290039
0049006f00be00c700d0012301c1026f050c05320540057affd400140031
0055005700a700b400e601f7027e027e027f03c60446ff42000e00850091
00bf00c200c500e1011a012f014f01560229026f029e03720008002c0031
0031006400690089009800c700de012b01b6020c02cf03a304ab04fb061d
fee0ff0e00060026009b009d00c1010d011801200173018201d601e30243
025f029b02e2039404a904d20761001c005e006d008d00ab00f701120138
0151015b0168017c01870191019901cd01d001e802410254026b02ef0368
037103bd044204420453047304830586058b06e8fe58fec4fed1fef7ff32
ff860051007c008100910095009e00b400b900cf00d900d900df00e20105
010b010e010e012001210155017b017b017e018d01a201a801a901b401d0
01d001e201e901f201f501fb020002000206021b02210222022202230272
02770294029c02cf02cf02d002ec02f903170322032b0335033c0359036f
037103870390039003b503e1041a04cf04ff053205320596059f05a805ab
05c205f0060c0782080008ccfca3fd2afddefe00fe88fe96feb2feb4ffe1
00150019001a001c001f003c005100610061006a0078009600a500af00d3
010c0118011a012a013e014c0151015f016a0171017801820184019a01a5
01a801a901ae01bc01cd01d701ef0200020d021c02210222022e02350242
024f024f025e026502710290029202b402d602fa0307030b030f0315032a
0347035d036503740379039603b003cc03dd03e203f603fc03fc03ff040a
041f04220426042b0447045f0475049e04e704e7055c05cb05e5060a066d
068606b806f10736073e07500751075d078f07b607d4086000b600c300b5
00b700000000000000000000000001e00381034503b5008e0233041902ce
02ce002d005f0064034d023f000002a80188027d01b402240578063b023b
014e00f00426029402c6029f02f6023b034d014b0153006a023100000000
0000061404aa0000003c04c300ed04bc026502ce03b50078060c017e02ef
060c00b201000239000001c50330042b03cb00da03df010704a100db040a
011701ed02a70350010b01bd043e05580021039c00ae0371017d00b50245
00000afb088c012b014e01aa00870054013201f803ff0003024e00b40037
03e30083006b02d800ed00770088009701640467008e0033017c00e700a6
029e0329056e062a061501c90269048a021301b4000204a9000002390124
010305140084015d039a06ef02d9007500cf040a00de03ac04bc02cf02ae
034d04f005520168006d007d00860071ff810079055804d2016700030156
002504e00094007c033204210094007f0072005c002f00b6001800ba00b8
0041034d00720018001f004c016a01550099009a009a009800b200040078
006900140057006e00ce00b4065402b80067050e016500e7000004cbfe52
005affa60099ff67006eff92002dffd40087ff7c00b800a800e5008f00a8
0185fe7b0070001e00d900de014c054602cf0546ff2d028a02d902530296
00b700000000000000000000000000000125011800ea00ea00ae0000003e
05bb008a04d70053003fff8cffd500150028002200990062004a00e4006d
00ee00e5004803c00033fe4e02b1ff460370007905df0051ffa7ff1f010a
0068ff6c004f00bc00a507050061072b00ed04b001d200b6007b00650252
ff740365fe690094008f005c004000860075008900894043555441403f3e
3d3c3b3a3938373534333231302f2e2d2c2b2a292827262524232221201f
1e1d1c1b1a191817161514131211100f0e0d0c0b0a090807060504030201
002c4523466020b02660b004262348482d2c452346236120b02661b00426
2348482d2c45234660b0206120b04660b004262348482d2c4523462361b0
206020b02661b02061b004262348482d2c45234660b0406120b06660b004
262348482d2c4523462361b0406020b02661b04061b004262348482d2c01
10203c003c2d2c20452320b0cd442320b8015a51582320b08d44235920b0
ed51582320b04d44235920b09051582320b00d44235921212d2c20204518
684420b001602045b04676688a4560442d2c01b10b0a432343650a2d2c00
b10a0b4323430b2d2c00b0172370b101173e01b0172370b10217453ab102
00080d2d2c45b01a234445b01923442d2c2045b00325456164b050515845
441b2121592d2cb00143632362b0002342b00f2b2d2c2045b0004360442d
2c01b00643b00743650a2d2c2069b04061b0008b20b12cc08a8cb8100062
602b0c642364615c58b00361592d2c45b0112bb0172344b0177ae4182d2c
45b0112bb01723442d2cb01243588745b0112bb0172344b0177ae41b038a
45186920b01723448a8a8720b0a05158b0112bb0172344b0177ae41b21b0
177ae45959182d2c2d2cb0022546608a46b040618c482d2c4b53205c58b0
02855958b00185592d2c20b0032545b019234445b01a23444565234520b0
0325606a20b009234223688a6a606120b01a8ab000527921b21a1a40b9ff
e0001a45208a54582321b03f1b235961441cb114008a5279b31940201945
208a54582321b03f1b235961442d2cb110114323430b2d2cb10e0f432343
0b2d2cb10c0d4323430b2d2cb10c0d432343650b2d2cb10e0f432343650b
2d2cb11011432343650b2d2c4b525845441b2121592d2c0120b003252349
b04060b0206320b000525823b002253823b002256538008a63381b212121
212159012d2c4bb06451584569b00943608a103a1b212121592d2c01b005
251023208af500b0016023edec2d2c01b005251023208af500b0016123ed
ec2d2c01b0062510f500edec2d2c20b001600110203c003c2d2c20b00161
0110203c003c2d2cb02b2bb02a2a2d2c00b00743b006430b2d2c3eb02a2a
2d2c352d2c76b8022323701020b802234520b0005058b00161593a2f182d
2c21210c6423648bb84000622d2c21b08051580c6423648bb82000621bb2
00402f2b59b002602d2c21b0c051580c6423648bb81555621bb200802f2b
59b002602d2c0c6423648bb84000626023212d2cb4000100000015b00826
b00826b00826b008260f10161345683ab001162d2cb4000100000015b008
26b00826b00826b008260f1016134568653ab001162d2c4b53234b515a58
20458a60441b2121592d2c4b545820458a60441b2121592d2c4b53234b51
5a58381b2121592d2c4b5458381b2121592d2cb0134358031b02592d2cb0
134358021b03592d2c4b54b012435c5a58381b2121592d2cb012435c580c
b00425b00425060c6423646164b807085158b00425b00425012046b01060
482046b0106048590a21211b2121592d2cb012435c580cb00425b0042506
0c6423646164b807085158b00425b00425012046b8fff060482046b8fff0
6048590a21211b2121592d2c4b53234b515a58b03a2b1b2121592d2c4b53
234b515a58b03b2b1b2121592d2c4b53234b515ab012435c5a58381b2121
592d2c0c8a034b54b00426024b545a8a8a0ab012435c5a58381b2121592d
2c4b5258b00425b0042549b00425b00425496120b0005458212043b00055
58b00325b00325b8ffc038b8ffc038591bb04054582043b0005458b00225
b8ffc038591b2043b0005458b00325b00325b8ffc038b8ffc0381bb00325
b8ffc03859595959212121212d2c462346608a8a462320468a608a61b8ff
8062232010238ab902c202c28a70456020b0005058b00161b8ffba8b1bb0
468c59b0106068013a2d2cb1020042b123018851b1400188535a58b91000
0020885458b202010243604259b12401885158b920000040885458b20202
02436042b12401885458b2022002436042004b014b5258b2020802436042
591bb940000080885458b202040243604259b94000008063b80100885458
b202080243604259b94000010063b80200885458b202100243604259b940
00020063b80400885458b202400243604259595959592d2cb0024354584b
53234b515a58381b2121591b21212121592d0000000100000005199ab1b0
afba5f0f3cf5081b080000000000a2e3272a00000000c9acc9bbfaaffd67
1000080c00000009000100000000000000010000073efe4e00431000faaf
fa7a100000010000000000000000000000000000005a0600010006000100
060001000239000002390000023900000239000002390000071d0077071d
0077071d0077071d0077071d0077031d0040031d0040031d004002aa0041
02aa004102aa004104730055047300df0473003c047300560473001a0473
00550473004d047300610473005304730053023900b9023900aa023900aa
023900aa023900aa023900aa023900aa023900aa055600960556009605c7
009e055600a204e300a804e300a804e300a804e300a804e300a804e300a8
0473009606aa009805c7009c063900630556009e0556009e05c700a10556
005c04e3003004e3003004e30030078d0019078d0019078d0019078d0019
078d0019078d0019078d0019078d0019078d0019078d00190473004a0473
004a04000050047300460473004b02390013047300420473008701c70088
01c700880400008801c7008306aa00870473008704730044047300440473
004402aa00850400003f02390024047300830400001a001a000f00000015
001500150015001500150015001500e900e900e900e900e9015901590159
017c017c017c02b7033a04780593068c07bc090109570b440b440b720bd1
0bd10bd10bd10bd10bd10bd10cd60cd60d940e050e6b0e6b0e6b0e6b0e6b
0e6b0ebb106a115e121e12c012c0141515c216431643164317b317b317b3
17b317b317b317b317b317b317b3195a195a1a801b8f1c941d4c1e6f1f5b
2042204221c022732418251526202620262026ad28ce29832a6c2ba12ba1
2cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc6
2cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc6
2cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc6
2cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc6
2cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc6
2cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc6
2cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc6
2cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc6
2cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc6
2cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc6
2cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc6
2cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc6
2cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc6
2cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc6
2cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc6
2cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc6
2cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc6
2cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc6
2cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc6
2cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc6
2cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc6
2cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc6
2cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc6
2cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc6
2cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc6
2cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc6
2cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc6
2cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc6
2cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc6
2cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc6
2cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc6
2cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc6
2cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc6
2cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc6
2cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc6
2cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc6
2cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc6
2cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc6
2cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc6
2cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc6
2cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc6
2cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc6
2cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc6
2cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc6
2cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc6
2cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc6
2cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc6
2cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc6
2cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc6
2cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc6
2cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc6
2cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc6
2cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc6
2cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc6
2cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc6
2cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc6
2cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc6
2cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc6
2cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc6
2cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc6
2cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc6
2cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc6
2cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc6
2cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc6
2cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc6
2cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc6
2cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc6
2cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc6
2cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc6
2cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc6
2cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc6
2cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc6
2cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc6
2cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc6
2cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc6
2cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc6
2cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc6
2cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc6
2cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc6
2cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc6
2cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc6
2cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc6
2cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc6
2cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc6
2cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc6
2cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc6
2cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc6
2cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc6
2cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc6
2cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc6
2cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc6
2cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc6
2cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc6
2cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc6
2cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc6
2cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc6
2cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc6
2cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc6
2cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc6
2cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc6
2cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc6
2cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc6
2cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc6
2cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc6
2cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc6
2cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc6
2cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc6
2cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc6
2cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc6
2cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc6
2cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc6
2cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc6
2cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc6
2cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc6
2cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc6
2cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc6
2cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc6
2cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc6
2cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc6
2cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc6
2cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc6
2cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc6
2cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc6
2cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc6
2cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc6
2cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc6
2cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc6
2cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc6
2cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc6
2cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc6
2cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc6
2cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc6
2cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc6
2cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc6
2cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc6
2cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc6
2cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc6
2cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc6
2cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc6
2cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc6
2cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc6
2cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc6
2cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc6
2cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc6
2cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc6
2cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc6
2cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc6
2cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc6
2cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc6
2cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc6
2cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc6
2cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc6
2cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc6
2cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc6
2cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc6
2cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc6
2cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc6
2cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc6
2cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc6
2cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc6
2cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc6
2cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc6
2cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc6
2cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc6
2cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc6
2cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc6
2cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc6
2cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc6
2cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc6
2cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc6
2cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc6
2cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc6
2cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc6
2cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc6
2cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc6
2cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc6
2cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc6
2cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc6
2cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc6
2cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc6
2cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc6
2cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc6
2cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc6
2cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc6
2cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc6
2cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc6
2cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc6
2cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc6
2cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc6
2cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc6
2cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc6
2cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc6
2cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc6
2cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc6
2cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc6
2cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc6
2cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc6
2cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc6
2cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc6
2cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc6
2cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc6
2cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc6
2cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc6
2cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc6
2cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc6
2cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc6
2cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc6
2cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc6
2cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc6
2cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc6
2cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc6
2cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc6
2cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc6
2cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc6
2cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc6
2cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc6
2cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc6
2cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc6
2cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc6
2cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc6
2cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc6
2cc62cc62cc62cc62cc62cc62cc62cc62cc62cc62cc6000100000d5900f2
003c009d000700020010002f0056000004ac0bbe000500020000003a02be
0000000300000000006a00000000000300000001000a006a000000030000
0002000e00740000000300000003005e00820000000300000004000a006a
0000000300000005001800b00000000300000006000e00e0000000030000
0007006200ee00000003000000080030000e0000000300000009008a0150
000000030000000d02aa01da000100000000000000350484000100000000
0001000504b90001000000000002000704be0001000000000003002f04c5
0001000000000004000504b90001000000000005000c04dc000100000000
0006000704f40001000000000007003104fb00010000000000080018048b
00010000000000090045052c000100000000000d01550571000300010403
0002000c06c60003000104050002001006d20003000104060002000c06e2
0003000104070002001006ee0003000104080002001006fe000300010409
0000006a00000003000104090001000a006a0003000104090002000e0074
0003000104090003005e00820003000104090004000a006a000300010409
0005001800b00003000104090006000e00e00003000104090007006200ee
00030001040900080030000e0003000104090009008a0150000300010409
000d02aa01da00030001040a0002000c06c600030001040b00020010070e
00030001040c0002000c06c600030001040e0002000c071e000300010410
0002000e072a0003000104130002001207380003000104140002000c06c6
00030001041500020010074a0003000104160002000c06c6000300010419
0002000e075a00030001041b00020010076800030001041d0002000c06c6
00030001041f0002000c06c60003000104240002000e077800030001042a
0002000e078600030001042d0002000e079400030001080a0002000c06c6
0003000108160002000c06c6000300010c0a0002000c06c6000300010c0c
0002000c06c600a90020003200300031003100200054006800650020004d
006f006e006f007400790070006500200043006f00720070006f00720061
00740069006f006e002e00200041006c006c002000520069006700680074
0073002000520065007300650072007600650064002e0041007200690061
006c0052006500670075006c00610072004d006f006e006f007400790070
0065003a0041007200690061006c00200052006500670075006c00610072
003a00560065007200730069006f006e00200035002e0031003000200028
004d006900630072006f0073006f0066007400290041007200690061006c
004d00540041007200690061006c00200069007300200061002000740072
006100640065006d00610072006b0020006f006600200054006800650020
004d006f006e006f007400790070006500200043006f00720070006f0072
006100740069006f006e002e004d006f006e006f00740079007000650020
0054007900700065002000440072006100770069006e00670020004f0066
00660069006300650020002d00200052006f00620069006e0020004e0069
00630068006f006c00610073002c00200050006100740072006900630069
00610020005300610075006e006400650072007300200031003900380032
0059006f00750020006d0061007900200075007300650020007400680069
007300200066006f006e007400200074006f00200064006900730070006c
0061007900200061006e00640020007000720069006e007400200063006f
006e00740065006e00740020006100730020007000650072006d00690074
00740065006400200062007900200074006800650020006c006900630065
006e007300650020007400650072006d007300200066006f007200200074
00680065002000700072006f006400750063007400200069006e00200077
00680069006300680020007400680069007300200066006f006e00740020
0069007300200069006e0063006c0075006400650064002e00200059006f
00750020006d006100790020006f006e006c007900200028006900290020
0065006d0062006500640020007400680069007300200066006f006e0074
00200069006e00200063006f006e00740065006e00740020006100730020
007000650072006d00690074007400650064002000620079002000740068
006500200065006d00620065006400640069006e00670020007200650073
007400720069006300740069006f006e007300200069006e0063006c0075
00640065006400200069006e0020007400680069007300200066006f006e
0074003b00200061006e006400200028006900690029002000740065006d
0070006f0072006100720069006c007900200064006f0077006e006c006f
006100640020007400680069007300200066006f006e007400200074006f
002000610020007000720069006e0074006500720020006f00720020006f
00740068006500720020006f007500740070007500740020006400650076
00690063006500200074006f002000680065006c00700020007000720069
006e007400200063006f006e00740065006e0074002ea920323031312054
6865204d6f6e6f7479706520436f72706f726174696f6e2e20416c6c2052
69676874732052657365727665642e417269616c526567756c61724d6f6e
6f747970653a417269616c20526567756c61723a56657273696f6e20352e
313020284d6963726f736f667429417269616c4d54417269616c20697320
612074726164656d61726b206f6620546865204d6f6e6f7479706520436f
72706f726174696f6e2e4d6f6e6f7479706520547970652044726177696e
67204f6666696365202d20526f62696e204e6963686f6c61732c20506174
7269636961205361756e646572732031393832596f75206d617920757365
207468697320666f6e7420746f20646973706c617920616e64207072696e
7420636f6e74656e74206173207065726d69747465642062792074686520
6c6963656e7365207465726d7320666f72207468652070726f6475637420
696e207768696368207468697320666f6e7420697320696e636c75646564
2e20596f75206d6179206f6e6c792028692920656d626564207468697320
666f6e7420696e20636f6e74656e74206173207065726d69747465642062
792074686520656d62656464696e67207265737472696374696f6e732069
6e636c7564656420696e207468697320666f6e743b20616e642028696929
2074656d706f726172696c7920646f776e6c6f6164207468697320666f6e
7420746f2061207072696e746572206f72206f74686572206f7574707574
2064657669636520746f2068656c70207072696e7420636f6e74656e742e
004e006f0072006d0061006c006f00620079010d0065006a006e00e9006e
006f0072006d0061006c005300740061006e0064006100720064039a03b1
03bd03bf03bd03b903ba03ac004e006f0072006d00610061006c0069004e
006f0072006d00e1006c004e006f0072006d0061006c0065005300740061
006e00640061006100720064004e006f0072006d0061006c006e0079041e
0431044b0447043d044b0439004e006f0072006d00e1006c006e0065004e
0061007600610064006e006f0074006801b001a10300006e006700410072
00720075006e00740061b900540328b326181fd0bc032900e00329000203
29b22b1d1fb90327031db23b1f40b80323b31215320f412d03200001002f
0320000100200320006f032000af032000bf03200004005f031e00010010
031e007f031e0080031e00af031e00bf031e00d0031e00060000031e0010
031e0020031e006f031e009f031e00e0031e0006031d031cb2201f104127
0319007f03190002000f031700ef031700ff03170003001f0317002f0317
004f0317005f0317008f0317009f03170006000f0317005f0317006f0317
007f031700bf031700f00317000600400317b2923340b80317b28b3340b8
0317b36a6c3240b80317b2613340b80317b35c5d3240b80317b357593240
b80317b34d513240b80317b344493240b80317b23a3340b80317b3313432
40b80317b32e423240b80317b3272c3240b80317b312253280b80317b30a
0d32c04116031600d00316000200700316000102c4000f0101001f00a003
1500b0031500020306000f0101001f00400312b32426329fbf0304000103
0203010064001fffc00301b20d1132410a02ff02ef0012001f02ee02ed00
64001fffc002edb30e11329f414a02e200af02e200bf02e2000302e202e2
02e102e1007f02e00001001002e0003f02e0009f02e000bf02e000cf02e0
00ef02e0000602e002e002df02df02de02de000f02dd002f02dd003f02dd
005f02dd009f02dd00bf02dd00ef02dd000702dd02dd001002dc00010000
02dc0001001002dc003f02dc000202dc02dc001002db000102db02db000f
02da000102da02daffc002d3b2373932b9ffc002d3b22b2f32b9ffc002d3
b21f2532b9ffc002d3b2171b32b9ffc002d3b2121632b802d2b2f9291fb9
0326031cb23b1f40bb0322003e00330322b225311fb80318b23c691fb802
e3b3202b1fa0413002d400b002d40002000002d4001002d4002002d40050
02d4006002d4007002d40006006002d6007002d6008002d6009002d600a0
02d600b002d60006000002d6001002d6002002ca002002cc002002d60030
02d6004002d6005002d6000802d0b2202b1fb802cfb226421f411602ce02
c70017001f02cd02c80017001f02cc02c60017001f02cb02c50017001f02
c902c5001e001f02ca02c6b21e1f00410b02c6000002c7001002c6001002
c7002f02c5000502c1b324121fff411102bf0001001f02bf002f02bf003f
02bf004f02bf005f02bf008f02bf000602bf0222b2641f12410b02bb00ca
0800001f02b200e90800001f02a600a20800406a1f402643493240204349
3240263a3d3240203a3d329f209f26024026969932402096993240268e92
3240208e92324026848c324020848c3240267a813240207a813240266c76
3240206c76324026646a324020646a3240265a5f3240205a5f3240264f54
3240204f5432b8029eb724271f374f6b0120410f02770030027700400277
00500277000402770277027700f90400001f029bb22a2a1fb8029a402b29
2a1f80ba0180bc0180520180a201806501807e01808101803c01805e0180
2b01801c01801e0180400180bb0138000100800140b40180400180bb0138
00010080013940180180ca0180ad01807301802601802501802401802001
3740b80221b2493340b80221b2453340b80221b341423240b80221b33d3e
320f410f0221003f0221007f0221000300bf022100cf022100ff02210003
00400221b320223240b80221b3191e3240b80222b32a3f3240b80221b32e
3a326f414802c3007f02c3008f02c300df02c30004002f02c3006002c300
cf02c30003000f02c3003f02c3005f02c300c002c300ef02c300ff02c300
0600df02220001008f02220001000f0222002f0222003f0222005f022200
7f022200ef0222000600bf022100ef02210002006f0221007f022100af02
210003002f0221003f0221004f0221000302c302c3022202220221022140
1d101c102b1048038f1c010f1e014f1eff1e023700161600000012110811
b8010db6f70df8f70d00094109028e028f001d001f0290028f001d001f02
8fb2f91d1fb80198b226bb1f41150197001e0401001f013900260125001f
013800730401001f0135001c0801001f0134001c02ab001f0132b21c561f
b8010fb2262c1fba010e001e0401b61ff91ce41fe91cb80201b61fe81cbb
1fd720b80401b21fd51cb802abb61fd41c891fc92fb80801b21fbc26b801
01b21fba20b80201b61fb91c381fadcab80401b21f8126b8019ab21f7e26
b8019ab61f7d1c471f6b1cb80401b21f6526b8019ab21f5e73b80401400f
1f52265a1f481c891f441c621f4073b80801b61f3f1c5e1f3c26b8019ab2
1f351cb80401b61f301cbb1f2b1cb80401b61f2a1c561f291cb80101b21f
231eb80401b21f5537b80168402c07960758074f07360732072c0721071f
071d071b071408120810080e080c080a080808060804080208000814b8ff
e0402b000001001406100000010006040000010004100000010010020000
01000200000001000002010802004a00b013034b024b5342014bb0c06300
4b6220b0f65323b8010a515ab005234201b0124b004b5442b0382b4bb807
ff52b0372b4bb007505b58b101018e59b0382bb00288b801005458b801ff
b101018e851bb0124358b900010111858d1bb900010128858d5959001816
763f183f123e113946443e113946443e113946443e113946443e11394660
443e11394660442b2b2b2b2b2b2b2b2b2b2b182b2b2b2b2b2b2b2b2b2b2b
182b1db0964b5358b0aa1d59b0324b5358b0ff1d594bb09353205c58b901
f201f04544b901f101f045445958b9033e01f2455258b901f2033e445959
4bb8015653205c58b9002001f14544b9002601f145445958b9081e002045
5258b90020081e4459594bb8019a53205c58b9002501f24544b9002401f2
45445958b909090025455258b9002509094459594bb8040153205c58b173
244544b1242445445958b917200073455258b9007317204459594bb80401
53205c58b1ca254544b1252545445958b9168000ca455258b900ca168044
59594bb03e53205c58b11c1c4544b11e1c45445958b9011a001c455258b9
001c011a4459594bb05653205c58b11c1c4544b12f1c45445958b9018900
1c455258b9001c01894459594bb8030153205c58b11c1c4544b11c1c4544
5958b90de0001c455258b9001c0de04459592b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b65
422b2b01b33b59635c456523456023456560234560b08b766818b0806220
20b163594565234520b003266062636820b003266165b059236544b06323
4420b13b5c4565234520b003266062636820b003266165b05c236544b03b
2344b1005c455458b15c406544b23b403b4523614459b347503437456523
456023456560234560b089766818b080622020b134504565234520b00326
6062636820b003266165b050236544b034234420b147374565234520b003
266062636820b003266165b037236544b0472344b10037455458b1374065
44b24740474523614459004b5342014b5058b108004259435c58b1080042
59b3020b0a124358601b2159421610703eb0124358b93b21187e1bba0400
01a8000b2b59b00c2342b00d2342b0124358b92d412d411bba0400040000
0b2b59b00e2342b00f2342b0124358b9187e3b211bba01a80400000b2b59
b0102342b0112342002b7475737500184569444569444569447373737374
757374752b2b2b2b74752b2b2b2b2b737373737373737373737373737373
737373737373737373732b2b2b45b0406144737400004bb02a534bb03f51
5a58b1070745b040604459004bb03a534bb03f515a58b10b0b45b8ffc060
4459004bb02e534bb03a515a58b1030345b040604459004bb02e534bb03c
515a58b1090945b8ffc06044592b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b752b2b2b2b2b2b2b435c58b9008002bbb301401e017400735903b01e4b
5402b0124b545ab012435c5a58ba009f02220001007359002b7473012b01
732b2b2b2b2b2b2b2b737373732b2b2b2b2b002b2b2b2b2b2b0045694473
456944734569447374754569447345694445694445694473744569444569
44732b2b2b2b2b732b002b732b74752b2b2b2b2b2b2b2b2b2b2b2b2b2b73
7475732b7374757374752b2b2b742b2b000000>
[15001 7925 ] AllocGlyphStorage
]def 
124 60 
PrepFor2015
Type42DictEnd

1 0 3 <> PBAAAA+ArialMT AddT42Char 
1 42 8 <00050077ffca069f05d3000b0017001b002700330107400a9019901a0268
081a1b1bb8029a400f181914181819181b150f191a312b12bc029f000901
65000c029f400b031a191903011b18182528bc029f001f0165002e029fb2
250b1cbc029a002b01000031029ab322ac3506bc029a00150100000f029a
4009200001007534575a182b10f65dedf4ed10f6edf4ed003fedfded103c
103c3f3c103c10edfded011112393911123939872e2b7d10c43130184379
40520133291e2b1f003320311f012d262b1f002f24311f010d020f1f0017
04151f01110a0f1f001308151f012a1d281f013221281f012c272e1f0030
232e1f000e010c1f0116050c1f01100b121f001407121f00002b2b2b2b2b
2b2b2b012b2b2b2b2b2b2b2b81015d133436333216151406232226012206
151416333236353426030133010134363332161514062322260122061514
16333236353426779e968ab5b78685b1013943595a4244595a42032292fc
e101e59e978ab5b78785b1013a44595a4245595a045a9ddcc5bfbac9c601
c5749b8d73749a8e73fa730609f9f7018e9edbc5bfbac9c701c4749b8c74
749a8e73>PBAAAA+ArialMT AddT42Char 
1 466 13 <00010040036302d505d300180086404a0b010b0a1b011b0a040a090c0e0f
101107060b01021816151413070004030817120d07070605181716151312
11100f0d0c0b1404070308010a06050b00001020140114bf0605000ba506
b80195400d05a50040111334001919708c182b4e10f42b4df4fde4003f3c
fd5d3c392f3c1217391217390111121739121739111217393130005d1337
1617262733060736371706071617072627060727363726402e9f48130191
031467852e7f7a3d6f783a4f4a387674328104ad8e3829b5446395342c8e
2a0e3588554f888d4a558f2e1900>PBAAAA+ArialMT AddT42Char 
1 690 16 <0001004101b8026a026d0003002c401970027003024d014d020201230002
1a05700001001904708d182b4e10e45d10e6002f4ded31300071015d1335
211541022901b8b5b500>PBAAAA+ArialMT AddT42Char 
1 760 19 <00020055ffe7041105c00010001d020f400d0f0c0c0c42550f0c0b0b4255
06b8ffe840110c0c425505180b0b425507100b0b42551bb8ffe8400b0b0b
42550f0c0b0b42551bb8fff440160d0d42551c060d0d42550f0c0d0d4255
07100d0d4255b10202435458400a1a1e0405141e0d0d1709b8ffe8b40f0f
025509b8ffe840190d0d02550911000c0f0f025500160c0c0255000c0d0d
0255002f2b2b2bcd2f2b2bcd003fed3fed31301bb10602435458400a1a1e
0405141e0d0d1709b8fff4b40f0f065509b8ffe6b40d0d065509b8ffee40
190b0b0655091100100d0d065500100c0c065500100b0b0655002f2b2b2b
cd2f2b2b2bcd003fed3fed31301bb4062019101cb8fff0b202200bbeffe0
0016ffe00012ffe0000fffe0404e04068702880b880fc90e0509070b1802
45134c154a19431b54135c155c19521b6b076b0b63136c156b19601b7902
7706760b7a0f870698079610c918da02d606d60bdb0f1a1a1e0405141e0d
0d17b8fff4b40c0c425517b8fff2b40b0b425517b8fff840140d0d425517
730940212334300901000910090209b8fff4b40b0b425509b8ffe8401c0d
0d425509901f110c0c0c4255110e0b0b425511080d0d4255117300b8ffc0
40202123342000400002000c0c0c425500080b0b425500080d0d42550090
1ec78b182b10f62b2b2b5d2bed2b2b2b10f62b2b5d712bed2b2b2b003fed
3fed3130015d71005d0038383838380138383859592b2b2b2b2b2b2b2b2b
002b2b131012363332161612151002062322272613101633323611102623
220706556bd3a076b274426ad3a1d47991b9a97c7ca9a97e7c4a5d02d301
04013dac5fb3feffdafefefec3ad98b7019dfe97eff00168016aee698600
>PBAAAA+ArialMT AddT42Char 
1 1390 20 <000100df000002fb05c0000a00da40440a0c0c0c4255000c0c0c42550a0e
0b0b4255000e0b0b42550a080d0d425500080d0d425503400d11346b047f
028f02990804ac04010900060502030905010c0201ca0a00b8ffc0400a21
233430000120000100b8ffe0b41010025500b8ffea40110f0f0255001c0c
0c0255000e0d0d025500b8fff040190f0f065500100c0c065500100d0d06
55001a0c05400d0f3405b8ffc0400e212334300501200540050205190bba
013c018500182b4e10e45d712b2b10f62b2b2b2b2b2b2b5d712b3c4dfd3c
003f3f17390111393130015d005d2b012b2b2b2b2b2b2123110606073536
36373302fbb441d35497e22f74047b3e7c1fae47ca5f>PBAAAA+ArialMT AddT42Char 
1 1652 21 <0001003c0000040705c0001e0218b90007ffe8b40c0c425508b8fff8b40b
0b425507b8ffe8b40b0b425508b8fff8b40d0d425507b8fff4b30d0d4255
b10602435458400911100d18131306550db8fff4b4111106550db8ffee40
09101006550d1e14051eb8ffe84017131306551e1e111106551e1c0e1006
551e0c0d0d06551eb802bb400c020a1717201f10110202201f1112392fd4
cd1112392fcd002fed2b2b2b2b3fed2b2b2bc43231301bb1020243545840
0911100d0c121202550db8fff440090f1102550d1e14051eb8ffe0400b12
1302551e140f1102551eb802bbb2020a17b8ffe8b40b0b025517b8ffec40
0e0d0d02551717201f10110202201f1112392fd4cd1112392f2b2bcd002f
ed2b2b3fed2b2bc43231301b40363b053b06bb05bf06bb07c708c91c0749
0c590c540e6b0c640e7a127a138912bc12e51ae51bf01a0cbf0bb713021b
101c101d101e1006befff00007ffe00008fff00009fff0401a1e0a100806
06ca1c1a141c1c1a081c1a030102081a1c030d1e10b802a4b34f110111b8
0118b50d1e1405001eb802bbb301020c0ab8fff4b40c0c42550ab8fff2b4
0b0b42550ab8fff840100d0d42550a7317d30000014021233401bb028100
2000100138400c11b53f025f026f027f020402ba0224001f018fb18b182b
10f65df4ed10f62b3c10f4ed2b2b2b003f3cfd3c3fedfd5de41112173901
11121739870e2e2b0e7d10c401111239313000383838380138383838005d
015d7259592b2b2b2b2b2515212637363637363635342623220607273636
33321615140606070606070407fc37021725a39aefa8997b829c01b913f8
d1d3f648a7c2a25c1eadad413c63c07ec4e5666b939c8a13cfd9eaad58aa
bca488613100>PBAAAA+ArialMT AddT42Char 
1 3352 24 <00010055ffe7042105a6001e01fc4013130c0c0c4255120c0c0c42550b18
0c0c425509b8ffe8400b0c0c425503180c0c425505b8ffe840170c0c4255
130c0b0b4255120c0b0b425503180b0b425509b8ffe8b40b0b425505b8ff
e840170b0b4255130c0d0d4255120c0d0d42550b180d0d425505b8ffe8b4
0d0d425509b8ffe8b30d0d4255b10202435458b90001ffc0400d0d0d0255
011c0e0a1e15151c12b802bb400b0f04041e1c0d0e01000718b8ffeab40f
0f025518b8ffeab40d0d0255182f2b2bcd2fcd2f003fed3fed12392ffdc4
10c42b31301b4029120c0d0d06550f0c0d0d06554b1a791d8a1d9613a713
c30cd60cdb1b080913180e2a1a03093005300bbaffe00003ffe04010130a
15121313ca0e0f140e13140e0f0db802a440130e0a1e15400ea00e020e0e
0f40150115151c12b802bbb70f0401d340000100b801184011041e1c0d11
5f106f107f108f1004108007b8fff4b40c0c425507b8fff2b40b0b425507
b8fff840140d0d425507731840212334301801001810180218b8fff4b70d
0d065518902012bc0135000f0195000d0138b20eb501ba01380000ffc040
0b212334200040000200901fb80192b18b182b10f65d2bedf4edf4ed10f6
2b5d712bed2b2b2bf45d3c003fedfd5de43fed12392f5d11392f5d10ed10
e487082e2b057d10c4001112393130013838383801715d2b2b592b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b133716163332363534262322060727132115
2103363332001514070623222655bd15996c82b4ad8c578c28a98e02d9fd
b74f8491c00108748df4c8fd0180108a8bc4a29ab24f3f1602f1acfe765c
fef6d1c791b2e000>PBAAAA+ArialMT AddT42Char 
1 4610 26 <000100610000041605a7000d0070400ec40d01040d010402080409030d00
b802bb4030020104090c0d73030302402123344f025f026f0203021a0f08
7309eb004f015f015f02033f015f016f017f010401190eb80192b18b182b
4e10f45d713c4df4ed4e10f6712b3c4d10ed003f3f3cfd3c391139011112
39313001715d13352115060003060723361212376103b58cfeed4b360fb9
0382f38904faad8c95fe12fefbb8dbad01ea01c79c00>PBAAAA+ArialMT AddT42Char 
1 4782 27 <00030053ffe7041905c00017002300300346b9001cffe840110c0c42551a
180c0c425507180c0c425520b8ffe840110c0c425522180c0c42552f180c
0c42552db8ffe8b40c0c425529b8ffe8400b0c0c425526180c0c425520b8
ffe8400b0b0b425522180b0b42551cb8ffe8400b0b0b42551a180b0b4255
29b8ffe8b40b0b42552db8ffe840110b0b42552f180b0b425526180b0b42
5520b8ffe8400b0d0d425522180d0d42551cb8ffe8400b0d0d42551a180d
0d425529b8ffe8b40d0d42552db8ffe840100d0d42552f180d0d42552618
0d0d4255b10202435458b40c001b1e2eb8ffc04017131302552e2e12211e
0605281e120d1e090c0c0c025509b8fff4b60d0d0255092b0fb8fff0b40f
0f02550fb8ffe8b40b0b02550fb8ffe8b60d0d02550f1803b8fff0b41010
025503b8fff0b40f0f025503b8fff440190d0d02550324150c0b0b025515
0c0c0c0255150c0d0d0255152f2b2b2bcd2f2b2b2bcd2f2b2b2bcd2f2b2b
cd003fed3fed12392f2bed393931301bb10602435458b71e090c0c0c0655
09b8fff4b60d0d0655092b0fb8ffe4b40f0f06550fb8ffe4b60d0d06550f
1803b8fff0b40f0f065503b8fffc40220d0d06550324150c0c0c0655150c
0d0d0655150c001b1e2e2e12211e0605281e120d003fed3fed12392fed39
39012f2b2bcd2f2b2bcd2f2b2bcd2f2b2bcd31301b403735160129164916
4926e60ce930050930017d007d017c047408710b720c750d7a178b008a01
8c048608810b840c860d8d17cc11c6131222b8ffe0b21c201ab8ffe0b220
202fb8ffe0b22d2026b8ffe0401929200c001e18000c1b1e2ea02e012e12
211e0605281e120d1eb8fff4b40c0c42551eb8fff2b40b0b42551eb8fff8
400a0d0d42551e73bf090109ba0267002bfff4b40c0c42552bb8fff2b40b
0b42552bb8fff840140d0d42552b730f40202334300f01000f100f020fb8
0191401932180c0c0c4255180e0b0b425518080d0d42551873b0030103b8
02674015240c0c0c4255240e0b0b425524080d0d4255247315b8ffc0400e
2123342015401502159031c78b182b10f65d2bed2b2b2bf45ded2b2b2b10
f45d712bed2b2b2bf45ded2b2b2b003fed3fed12395d2fed393901111239
393130013838383838383838015d727100715959012b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b0126263534363332161514060716
161514002322003534361314163332363534262322060314161633323635
3426232206016a706ce6bfc0ea6b6d878dfef6d9d9fef69162866b688589
6667883a49905381a8ad827fa7031b29986aa0dadfa06697292cc488bcff
000101c08fc101546884835f638784fcff4d904fa68082aaa800>PBAAAA+ArialMT AddT42Char 
1 5768 29 <000200b9000001860426000300070038402004050006070902063c04033c
0106040a023c2f003f000220000100a108a198182b10f45d71ed003f3fed
10ed011112393912393931301335331503353315b9cdcdcd0359cdcdfca7
cdcd>PBAAAA+ArialMT AddT42Char 
1 5860 30 <000200aafede018304260003000e0085402f730b830b930ba30bf00b0500
0b01260a370a460a560a650ab50ae20a070b0a0e0704033c01073c060605
0e040bab0ab801504023053c040106040a028100000506073c040a380b3a
052f043f040220040104a10fa198182b10f45d713cf4e410fd3c103c10ed
003f3f10fdfded103c103c10ed10ed011112390010c93130017100727113
3533150335331514060727363637b6cdcdcd5057323936030359cdcdfca7
cdcd718b264d19615b00>PBAAAA+ArialMT AddT42Char 
1 6050 37 <00030096000004e905ba0011001d002a0185b90004fff440290b0b065504
044623562366237309840906691a75057009730b8305830b062716090318
272a1e161d09b8ffe8b40c0c425509b8ffe8b40b0b425509b8ffe8401b0d
0d4255090913121e2a2a2929001c1d1e0201021f1e1e11000818b8fffeb4
0c0c425518b8fff2b40b0b425518b8fff6400d0c0d42551826060c101002
5506b8ffe640250f0f025506120d0d025506060c0c025506080b0b065506
0c0c0c065506140d0d0655065425b8fffeb40c0c425525b8fff2b40b0b42
5525b8fff640130c0d425525260c1c101002550c0a0d0d02550cb8fff440
270b0b06550c1a2c1d1e020c0c42551e0e0b0b42551e0a0c0d42551e2001
20000100201010025500b8fff6b40f0f025500b8fff6b40d0d025500b8ff
fab40c0c025500b8fffab40c0c065500b8fff0400a0d0d0655005d2b3b5c
182b10f62b2b2b2b2b2b5d3cfd2b2b2b3c4e10f62b2b2b4ded2b2b2bf42b
2b2b2b2b2b2bed2b2b2b003f3cfd3c3f3cfd3c12392f3c10fd3c392f2b2b
2b1139111239011217393130015d005d2b33112132161615140607161615
140e0223012132373636353426262321112132373e023534262623219602
26a8cb736667858f5780c18cfe93013d81384a4b46829efedb016d5e2643
5a3a54958cfead05ba59b9655ea63327bc8067b1603103521116664d496f
29fba0070c386b4652793100>PBAAAA+ArialMT AddT42Char 
1 7542 48 <000100980000060f05ba00100317400c082a0b0d4255022a0b0d4255b102
02435458b90008fff6400b0c0c0255080e0d11025502b8ffeeb40d110255
05b8ffee40280d1102550c120c0c0255050f0c030900010208090b0e0008
09020a0b06101002550b100d0d02550bb8fffab60c0c02550b1000b8ffe6
b41010025500b8fff8b40f0f025500b8fffcb40d0d0255002f2b2b2bcd2f
2b2b2bcd003f3fc0c010d0d0c0111217392b2b3130012b2b2b001bb10602
435458401f07200b0b065506200b0b065503200b0b065504200b0b065505
200b0b065508b8fff240230b0b0655020c0b0b065503060c0c0655020e0c
0c0655090c0c0c06550a0c0c0c065507b8fff8b40d0d065508b8fff8401f
0d0d06552605010c200a12340f200a12340f050c0300010e0b0008080102
0ab8ffeeb40b0b06550ab8ffeeb40c0c06550abb0256001200100256400d
000c0b0b065500060c0c065500b8fff8b40d0d065500012f2b2b2bf42ff4
2b2b003f3c3f3c3c111217392b2b5d3130012b2b2b2b2b2b2b2b002b2b2b
2b2b1b407f00020f0814021b0804760c860cc80c03090c490c490f032904
250d2c0e58035b04760d780e870d080b020508390d360e4f024b03440740
084d0d420e0a9802990396079608a803a7070612020f0e0e300502140505
02080c0d0d300508140505080c520f5201400102020808090a0b0b0d0d0e
0e1000080902601280120212ba02a8000d0131b2052008b8013140160c09
0a0a0b0b42550a0a0c0c42550a20400c7f0b010bba0256000e010bb20520
02b8010bb20f0100b8fff6b40b0b425500b8fff6400b0c0c425500200f70
100110b80256b72005600580050305b802a8b3113b59182b1910f45df45d
3c18fd2b2b3c10ed1a1910edf45d3c1a18fd2b2b3c10ed1a1910ede45d00
183f3f3c3c103c103c103c103c103c103c1a10eded87052e2b877dc4872e
182b877dc43130004bb00b534bb01e515a58bd000cfffb0008ffd60002ff
d638383859014bb00c534bb028515a58b9000dfff8b10e0a38385901435c
58b9000dffd4b621390e2c21390db8ffd4b637390e3237390db8ffd4b52d
390e2c2d392b2b2b2b2b2b5972715d00715d015d5959002b2b3311210116
173637012111231101230111980124015b30161935015f0105bbfe56affe
5805bafbf29148509b03fcfa4604cbfb3504e0fb2000>PBAAAA+ArialMT AddT42Char 
1 8404 49 <0001009c0000051f05ba000901bcb603180c0c425508b8ffe8b50c0c4255
120bb8ffc0400a13153408180c16025503b8ffe8401d0c16025508020303
200708140707080207030308090402020907080403b8fffbb40c0c425503
b8fff2b40b0b425503b8fffb40090c0c42550320060605b8ffecb40f0f02
5505b8fff2400b0d0d025505120c0c025505b8fff740260b0b0655055d20
0b01200b500b600b700b800b050b08090e0b0b4255090a0c0c4255092001
00b8ffc0400d13153420000100201010025500b8fff6b40f0f025500b8ff
f6b40d0d025500b8fffa400b0c0c025500040b0b065500b8fff7b40c0c06
5500b8fff8400a0d0d0655005d0a3b59182b10f62b2b2b2b2b2b2b5d2b3c
fd2b2b3c105d71f42b2b2b2b3c10fd2b2b2b3c003f3c3f3c123939011139
3987042e2b877dc4b10602435458b90003ffe0b70c113408200c1134002b
2b5931302b2b012b435c58b40840463903b8ffc0b646390840323903b8ff
c0b632390722193902b8ffdeb619390722323902b8ffdeb6323907222339
02b8ffde400b2339070e1439070e133902b8fff4b61339070e1d3902b8ff
f4b61d39070e153902b8fff8b115392b2b2b2b2b2b2b012b2b2b2b2b2b00
2b2b2b2b59002b2b331133011133112301119cc70302bac7fcfe05bafb81
047ffa460480fb80>PBAAAA+ArialMT AddT42Char 
1 8892 50 <00020063ffe705dd05d4000e001b0116404b1a0f01141014141b171b1b04
041004140b170b1b04a917b60ec60e031717181b02201d40114f134f1740
1a58055809571055115f135a175f18561a571b8b17990210191e0303121e
0b0915b8fffeb40c0c425515b8fff2b40b0b425515b8fff6400a0c0d4255
152620070107b8fff4b40b0b425507b8ffe8b41010025507b8ffeeb40d0d
025507b8fff0b40c0c025507b8ffeab40b0b065507b8fff4b40d0d065507
b8fffa403f0c0c0655071a801d011d0f020c0c42550f0e0b0b42550f0a0c
0d42550f2620000100080b0b4255000c0c0d425500060b0b065500060c0c
065500191c635c182b4e10f42b2b2b2b5d4ded2b2b2b4e105df62b2b2b2b
2b2b2b5d4ded2b2b2b003fed3fed3130015d71005d5d5d71131000213204
121514020423222402371000333200113402262322006301880136cb0146
abb4feb6bfcffebaa8c8011dd7db011b79e991cefed702ca016d019dc2fe
a5dcdffea0b5c8015abefef7fecf0134011bb3010b93fee5>PBAAAA+ArialMT AddT42Char 
1 9276 51 <0002009e000004fd05ba000d001800f0401e65116b14024b104b145b105b
14040b0c1e0f0e0e0017181e020102000812b8fffeb40c0c425512b8fff2
b40b0b425512b8fff8b60d0d4255122608b8fff640110d0d4255080a0d0d
025508100b0b065508b8fff4402d0c0c0655081a201a01201a011a180d02
0c0c42550d0e0b0b42550d0a0c0d42550d200120000100201010025500b8
fff6b40f0f025500b8fff6b40d0d025500b8fffa400b0c0c0255000c0b0b
065500b8fffab40c0c065500b8fff0400a0d0d0655005d193b5c182b10f6
2b2b2b2b2b2b2b5d3cfd2b2b2b3c4e10715df62b2b2b2b4ded2b2b2b003f
3f3cfd3c12392f3cfd3c3130015d005d33112132171e0215140221211111
213236353426272623219e0229924d6c9259eefec9fe88017bbc9e5d4c31
84fe8905ba0e1265b66dbbfefdfdac03018c7f5c83150d00>PBAAAA+ArialMT AddT42Char 
1 9600 53 <000200a1000005ad05ba00180022023a4021120b0e0112361c5a1f66086d
1f0409100d0d065508100d0d065507100d0d065524b8ffc0b40c0c02550d
b8fff4b40c0c02550cb8fff4b40c0c02550bb8fff4b40c0c025512b8ffe2
b3121a3412b8fff0b322273411b8ffe2b31d273410b8ffe2b31d27340fb8
ffe2b31d273412b8ffd8b31d263411b8ffe2b3121a3410b8ffe2b3121a34
0fb8ffe24049121a34250e4a1c4a20530b5c1c6d1c7209780e790f850a88
0f970da90fb80fe80ee70f100e0c0c20110f1411110f110f0c09121b0221
1a160a061211100d0c0518090916171a191e17b8ffc0b40b0b425517b8ff
c040150b0b065517170021221e0201020018180f0f0e081eb8fffeb40c0c
42551eb8fff2b40b0b42551eb8fff640090c0d42551e260e9c06b8ffe8b4
0f0f025506b8fff6b40d0d025506b8ffe040340c0c025506060d0d065506
5d20247024802403242218020c0c4255180e0b0b4255180a0c0d42551820
0120000100201010025500b8fff6b40f0f025500b8fff6b40d0d025500b8
fffa400b0c0c025500060b0b065500b8fff7b40c0c065500b8fff8400a0d
0d0655005d233ba8182b4e10f42b2b2b2b2b2b2b5d3c4dfd2b2b2b3c105d
f62b2b2b2b19e418ed2b2b2b003f3c103c103c3f3cfd3c12392f2b2bfd3c
103c392f12173901111739870e2e2b057d10c43130015d2b2b2b2b2b2b2b
2b2b2b2b2b2b002b2b2b5d435c58400a08400f390f103a11123a2b2b2b59
0171435c58b9000effde401a193911221939122219390e401c3910221439
10221f39102215392b2b2b2b2b2b2b593311213216161514060716171617
1323032e02272623231111213236363534262321a1028ac4cc7acad34d28
554cfff4c2556e572d214be101a185964e97a3fe3005ba4fc8799cd61d25
244e75fe710131848c380b07fd750333377947688600>PBAAAA+ArialMT AddT42Char 
1 11140 55 <00010030000004ba05ba000700de401906020c0c425507020c0c42550607
0b0b425507070b0b425501b8fff9b40b0b425500b8fff940110b0b425506
050c0d425507050c0d425501b8fffbb40c0d425500b8fffb40110c0d4255
05021e04030200080706050409b80273b320040104b80101b7062001022f
030103b80101b5010120000100b8ffe8400b1010025500080f0f025500b8
fff2b40c0c025500b8ffe2b40d0d025500b8fffcb40c0c065500b8fffeb4
0d0d065500b80273b308b699182b10f62b2b2b2b2b2b5d3c10f45d3c10fd
e45de6103c103c003f3f3cfd3c3130012b2b2b2b2b2b2b2b2b2b21112135
211521110213fe1d048afe1b050dadadfaf3>PBAAAA+ArialMT AddT42Char 
1 11398 58 <000100190000077605ba0018027cb9000ffffe400b0c0c425502020c0c42
550eb8fffab40c0c42550fb8fffd400b0c0c425502030c0c42550eb8fffa
b40b0b42550fb8fff440290b0b425504060b0b4255030a0b0b4255020e0b
0b4255040c0c0c4255030c0c0c4255020c0c0c42550eb8fff4b40d0d4255
0fb8ffeab40d0d42550fb8fff4b40c0c42550cb8ffd4b40b0d425505b8ff
d4402a0b0d42552900261129122618390036113912361849004711491247
185800571158125718109808980f02b10602435458403310011a192b1534
05340c4405440c4b155405540c5b156405640c6b157405740c7b150f0515
0c030001120800080f0208020102003f3f3f3f3f111217395d0111123939
1b401e030405050206070808050a0b0c0c090d0e0f0f0c14131212151617
181815b8ff3cb305001820b8ff3cb30c121120b8ff3c405a150809200005
020220010014010100180508081e151814151518120c09091e1512141515
12110c0f0f2010111410101112090c081815050f11100c000205150c0503
18100f0f0909080802020102181212111100081a17171a10410901510020
000c015100150151004000050151b620200101011919b8018bb1a8182b4e
10f45d1a194dfd1a18fdfd1a19fd184e456544e6003f3c103c103c3f3c10
3c103c103c103c121739011239391112393911123939113939874d2e2b87
7dc4872e182b877dc4872e182b877dc4872e182b877dc42b2b2b870e10c4
c4870e103cc4870e10c4c4870e10c4c4870e10c4c4870e10c4c4014bb00f
534bb011515a58b2120a18b8fff6383859014bb025534bb02a515a58b900
00ffc03859004bb00b534bb00e515a58b30c40054038385959313001725d
002b2b012b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b21013313161736370133
131217363713330123012627060701019efe7bc7df241a380a0117ead24f
231c2de6c3fe6ebbfecb27071714fec905bafc3f9795eb2403defd1afeec
f38bb403aefa46045d8c206547fba300>PBAAAA+ArialMT AddT42Char 
1 12134 68 <0002004affe8041c043e0028003702a8402c090d092a190d1a2a290d2a2a
390d3615371b3a2a492a5d0d5d2a6a0d692a60308a0d86299a169b1aa90d
1528b8ffe8b40b0b065527b8ffe840190b0b0655a619aa28b619bb28c419
cf28d215dd28084416011eb8fff440110c0c065512120c0c0655050c0c0c
065535b8ffe0404f0c0c06551f171f182b2c2a343904392c4904482c5608
592b6608692b760c870cc90cf90df92b1137340e0104102f243417322114
185f296f2902291c2f0e3f0e8f0e9f0eff0e059f0eaf0eef0e030eb8fffa
400b0b0b42550e0c0f0f02550eb8ffeab4101002550eb8fff44021101006
550e0c0d0d06550e060f0f06550e260d0d42550e180c0c42550e0e1c0317
b802aa400d182c0b0b42551895141c1c0700b8fff440110c0c0655004527
0a321c030b2961106100b8fff6b40b0b425500b8fff8b40c0c425500b8ff
fc400e0d0d425500060d0d025500252124b8ffecb41010025524b8ffec40
0b0d0d025524040c0c025524b8ffe4b40b0b025524b8fff4b40b0b065524
b8ffdc400b1010065524060f0f065524b8fffcb40c0c065524b8025b400e
27400026102620263026af260539b8ffc0b40e0e025526b8ffd6b40e0e02
5526b8fff4b60d0d4255263139b8ffc0400d1e23343039c03902a0390139
17b8fff4406b1010065517080c0c4255172518222f080d0d42552f0c0c0c
42552f0e0b0b42552f24bf06cf06021f063f060206140b0b425506140d0d
425506080c0c4255060e0f0f0255060c0d0d025506180c0c0255060c0b0b
0255060c0b0b0655060e0d0d065506100c0c065506313810f62b2b2b2b2b
2b2b2b2b2b5d71ed2b2b2bf4ed2b2b105d712bf62b2b2b5dedf42b2b2b2b
2b2b2b2b3cfd2b2b2b2be5e5003fed3fe42b3fedfd2be41112392f2b2b2b
2b2b2b2b2b5d71ed711112391112393901111217393130005d2b2b2b2b01
715d2b2b0071250606232226353436363736373637363534272623220607
273e02333216161716151514161723260306070e02151416333236373635
033c64b96aafbc477348356bda67013345887f791db0186ed08988aa5010
091722bc1c1762c46f5c326d6968a2261d835546ab854e814e140e0d1a24
250a6e2d3d597118718b4b40614a2e78f0fb853d3801dd281c10284d2f48
605b4f3d7700>PBAAAA+ArialMT AddT42Char 
1 12980 70 <00010050ffe803ed043e001a01f3b90017fff040220c0c42550a080c0c42
5509080c0c42550f080c0c425510080c0c425511080c0c4255b102024354
5840340e7f0f010f0b01400050007000030004121c0b07181c040b010e15
07080e0e0255070c0d0d0255070c0c0c025507100b0b0255072f2b2b2b2b
cdd4c6003fed3fed10c45d3210c45d3231301b4047090c011f1c43134317
53135317601360179b029b039a0da410a41a0c080d190a6a0269036a0575
0c700d800da60cb509b60ab50c0c160c860ce302030e225f0f6f0f7f0f03
0f01b802aa4026300040005000600070009000a000e000f00009000f0f0b
000004121c0b07181c040b1c0f010fb8fff4b40c0c42550fb8fff240120b
0b42550f240e080d0d06550e221b000100b8fff4b40c0c425500b8ffee40
810b0b425500240b2b1f010100010101400e2b425501400d0d425501400c
0c425501360b0b425501400b0b065501401010065501480c0c0655011a0d
0d065501491c15080d0d4255150c0c0c4255150e0b0b42551524cf07011f
073f0702070e0b0b0655070a1010065507120c0c0655070c0d0d4255070c
0c0c425507311b34c4182b10f62b2b2b2b2b5d71ed2b2b2b10f62b2b2b2b
2b2b2b2b5d724b53234b515a58b90001ffc03859ed2b2b72f42bed2b2b72
003fed3fed12392f11392f105de4105de43130005d71015d7159012b2b2b
2b2b2b011706062322001134123633321617072626232206151416333236
033cb11defaedafef772e989addc1faf197f5a88aaa4846a8e018517b7cf
011d010aac010281afa11b6b6cc3d3d6c282>PBAAAA+ArialMT AddT42Char 
1 13568 71 <00020046ffe803df05ba0011001d01bf407c0a02040d250d340d440d0535
14351c5702540a5214531c6702640565096314601cc01fd405d513dd19e5
13e514ef17eb19e51de01fff1f161f1f2b1a3c163c1a4b1a701f901f072e
02240d2e163a02350d4b02450d4614491c570a560d670de506e716fa01f4
0e100115030e0b100f001b1c0b0711000a151c030b18b8fff8b40d0d4255
18b8fff8b70c0c425518330100b8fff2b70b0b42550025110fb8fff8b40d
0d42550fb8fff4b40c0c42550fb8fff240270b0b42550f251010d0110110
11401160118011041f400b0b02551f400d0d025511121010025511b8fff4
40110f0f025511060e0e025511180d0d025511b8fff2400b0b0b0655110e
1010065511b8ffeeb40c0c065511b8fff8b40d0d065511b8fff840600c0c
4255117412080d0d4255120c0c0c4255120e0b0b4255122407100c0c4255
07100d0d4255bf07cf07df07ff07041f073f074f0703071e0b0b02550718
0c0c0255071e0d0d0255070c0b0b0655070c0d0d0655071a0c0c06550719
1e3450182b4e10f42b2b2b2b2b2b5d712b2b4ded2b2b2bfd2b2b2b2b2b2b
2b2b2b2b2b5d713c10ed2b2b2b10fd2b3ce42b2b003fed3f3c3fed3f3c11
391112393130005d01715d00712135062322262635341236333216171133
11011416333236353426232206033865c47fd5756ad48360962fb3fd20ac
7576a5a87b78a1869e8cfba39f01038a5141020efa460212cccac1c6dacc
c400>PBAAAA+ArialMT AddT42Char 
1 14110 72 <0002004bffe8041e043e0015001d019e40171f001c150255035d055d0955
0b65036b056f09650b0815b8ffe4b40d0d065511b8ffe440520d0d06551d
1c0d0d06552712d905fa14f61a0431123a19311c41124d1a411c51125c19
521c61126d1a611c78067815f602f618100016010f0d1717501660167016
03161c0f9010a010021010041b1c0a0700ba02aa0001ffc0b41010025501
b8ffc0400e101006551001010195131c040b17b8fff0b40c0c425517b8ff
f2b40b0b425517b8fff8b60d0d425517400db8ffdcb40d0d02550db8ffee
b40d0d06550db8ffeab40c0c06550db8ffc04009272a34b00d010d1a1fb8
ffc0b32526341fb8ffc0b71e2334301f011f16b8fffc405c0d0d42551633
10080c0c4255100e0b0b425510080d0d425510240740242a341f073f074f
0703070c0c0c4255070c0d0d425507200b0b025507180c0c0255071c0d0d
0255070e0b0b0655071c0c0c065507160d0d065507191e3437182b4e10f4
2b2b2b2b2b2b2b2b5d2b4dfd2b2b2be42b4e10712b2bf6712b2b2b2b4ded
2b2b2b003fedfd5d2b2be43fed12392f5d3cfd713c011112393912393130
015d005d2b2b2b0171720117060623220011100033320011140721161633
32360121262726232206035eba2ceeb9e9feef0114dcd5010e01fce80ab2
85638cfdda02510c3856897ca9015617a3b4011f0103010c0128fedefef9
1020afba680195864368a600>PBAAAA+ArialMT AddT42Char 
1 14632 73 <000100130000028005d300170129401e1409010f192f193019401970199b
0c9c0da90d081a0d280db019c0190419b8ffc040401a1f341d080d030c0f
1c0a0115022b1413040306000a9f140114ff130e0b0b4255134004170e0b
0b425517080d0d4255170c0c0c425517250400030292010100b8ffc0b331
383400b8ffc0402b1c1f3490000119400f0f025519400d0e025500141010
025500280f0f025500220e0e0255002c0d0d025500b8fff2400b0c0c0255
00140b0b065500b8ffeab41010065500b8ffe6b40f0f065500b8fffab70c
0c065500a31819bc01ba002100f6010a00182b2bf62b2b2b2b2b2b2b2b2b
2b2b5d2b2b3c10f43c103ced2b2b2b10ed2bed5d003f3f3c3c3cfd3c3fed
391139313043794014101106090706080602061009121b0011060f1b012b
012b2a8181012b715d007233112335333534373636333217072623220615
1533152311b29f9f131a83764c5c1b38325244cfcf039a8c716b34465712
9d0a4660628cfc66>PBAAAA+ArialMT AddT42Char 
2 0 74 <00020042fe5103ea043e001e002a01c540600b0b05142c0b25144c0b4514
06091d191d2c0b26142c23390b36144a0b46145607580b680bfa0af5150e
2e232c273e233e274c27902ca02c07362136293f2c460b46214529542154
29690763216329602c802cda27e821ee23ef271117160615b802b1b4281c
130701b802aa401020003000600070008000c000d0000700b8027d401005
1c1c0f0a45221c0c0a16153325330ab8fff2b40b0b42550ab8fff2b40c0c
42550ab8fff840270d0d42550a251818d017011017401760178017042c40
0b0c02552c400d0d025517121010025517b8fff440110f0f025517060e0e
025517160d0d025517b8ffea400b0b0b065517121010065517b8ffeeb40c
0c065517b8fffcb40d0d065517b8fffab40c0c425517b8fffa40680d0d42
5517740f012500221f0e0b0b42551f080d0d42551f0c0c0c42551f24bf0f
cf0fdf0fff0f041f0f3f0f4f0f030f0c0c0c42550f100d0d42550f200b0b
02550f1a0c0c02550f220d0d02550f1c0b0b06550f0c0d0d06550f1a0c0c
06550f192b2c74213450182b2b4ef42b2b2b2b2b2b2b2b5d714ded2b2b2b
f4ed10fd2b2b2b2b2b2b2b2b2b2b2b2b5d713c10fd2b2b2be4f63c003fed
e43fedfd5de43fede43f3c3130015d71005d711717161716333236373627
062322023534123633321735331114060623222613141633323635342623
220666af0b3243747d88180e0176b0dbf06ed18dbc7aa665dba0beea99a6
7d7ca8ad7a78a8581a512532645a37b08b013cdd9801018c9880fc6af8cf
78ab032ad1c0bfccc3c6c300>PBAAAA+ArialMT AddT42Char 
2 582 75 <00010087000003e805ba00140195b90016ffc0b315173403b8ffe0400e0d
0d0655250435034503ba0d0403b8ffe040151719341708110c1114030501
000f1c0507140b0a0cb8fff8b40d0d42550cb8fff2b40b0b42550cb8fff4
402a0c0c42550c250940333634ff0901c0090116400b0b02551640101002
5509281010025509140e0e025509b8ffec40110d0d025509040c0c025509
1a0b0b025509b8fff6400b0b0b065509141010065509b8fff8400b0d0d06
55090a0f0f065509b8fff6b60c0c0655094e16b8ffc04029343634b016f0
16027016a016b016ff1604160214080d0d4255140c0c0c4255140e0b0b42
5514250100b8ffc04010333634f0000100002000d000e0000400b8fffab4
1010025500b8fffa40170e0e025500040c0c025500080b0b025500040b0b
065500b8fffa40160f0f065500020c0c065500020d0d0655004e15475018
2b10f62b2b2b2b2b2b2b2b5d712b3cfd2b2b2b3c105d712bf42b2b2b2b2b
2b2b2b2b2b2b2b5d712bed2b2b2b003f3c3fed3f11391139011239313043
79400e060e07250e060c1b010d080f1b01002b012b2b81002b5d2b012b33
113311363332161615112311342623220606151187b47ec076ae4bb4756b
508d3c05bafdf2925da49cfd5f02a1877b538e7dfdbb>PBAAAA+ArialMT AddT42Char 
2 1054 76 <000200880000013c05ba0003000701a74019020a0b0b4255030a0b0b4255
060a0b0b4255070a0b0b425501b8fffcb40b0b425500b8fffcb40b0b4255
05b8fffcb40b0b425504b8fffc401d0b0b4255020b0c0c4255030b0c0c42
55060b0c0c4255070b0c0c425501b8fffdb40c0c425500b8fffdb40c0c42
5505b8fffdb40c0c425504b8fffd401d0c0c425502040d0d425503040d0d
425506040d0d425507040d0d425501b8fffcb40d0d425500b8fffcb40d0d
425505b8fffcb40d0d425504b8fffc403a0d0d425509360b0b02554f0990
09a009b009c009df09f0090700091f09700980099f09b009c009df09e009
ff090a1f0901000107040203090603b8ffc0402d0d0d4255037e01000605
06040a0607250500049f04a004b004c004e00406c004f0040200042004d0
04e0040404b8fff8b41010025504b8fffa40170e0e025504040c0c025504
0a0b0b025504140b0b065504b8ffeab41010065504b8fffeb40d0d065504
b8fffc400a0c0c0655044e084750182b10f62b2b2b2b2b2b2b2b5d71723c
fd3c003f3f3c3fed2b0111123939111239393130015d72712b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b133533150311331188b4b4
b404ebcfcffb150426fbda00>PBAAAA+ArialMT AddT42Char 
2 1516 78 <00010088000003f805ba000b02c6b6030e0b0b425509b8fff2b40b0b4255
08b8fff2b40b0b425504b8fff240310b0b4255070c0c0c4255060c0c0c42
55050c0c0c4255060c0d0d0655070656065a09030f0df305f60603090c10
10025506b8fff4b40c0c02550ab8fff4b40c0c025509b8fff4b40c0c0255
03b8ffe840100d0d06555503770a0212062013213408b8fff0b312273409
b8fff0b41227341205b8fff0b312213409b8fff040841227340604040504
06370947040525062d0a580a7703750ada03e30607a60601230626072508
390638093f0d4f0d59045906580759097d0479059909c606d204d606e406
e907f706f90815120a0a05030304020606070909080a0a05090808250706
1407070603040425050a1405050a0a09060304080102000405060708080b
0b000a04b8010f400905040c0c0655052208b8010f404520073f07020710
0c0c0655071a900d010d0b0e0b0b42550b080d0d42550b0c0c0c42550b25
00020e0b0b425502080d0d4255020c0c0c4255022501019000013f004f00
0200b8fffe40310e0e025500100d0d025500100c0c0255000a0b0b025500
120b0b065500120c0c065500080d0d065500190c0de1214766182b2b4ef4
2b2b2b2b2b2b2b5d713c4d10ed2b2b2b10ed2b2b2b4e1071f62b5d4dedf4
2bed003f3c103c103c3f3c3f3c11173987052e2b047d10c487052e182b0e
7d10c40710083c083c0310083c083cb10602435458400d4b09011f098403
0209180d1134002b5d7159313001435c58400a092c1d3909081d1d3c06b8
ffdeb21d3906b8ffd4b2203906b8ffd4b121392b2b2b2b2b595d00715d01
71002b2b435c58b90006ffc0b2213903b8ffc0b2163903b8ffdeb2103906
b8ffdeb2103903b8ffdeb20c3903b8ffdeb10b392b2b2b2b2b2b59012b2b
2b435c584012dd040108141639090814143c090814143c06b8fff6b21839
06b8ffecb11b392b2b2b2b2b015d59005d2b2b2b2b2b015d712b2b2b2b2b
2b002b2b33113311013301012301071188b401aae9fe6a01bfdefea17f05
bafcbc01b0fe76fd64021f7afe5b>PBAAAA+ArialMT AddT42Char 
2 2280 79 <000100830000013705ba0003014d400d020a0b0b4255030a0b0b425501b8
fffcb40b0b425500b8fffc40110b0b4255020b0c0c4255030b0c0c425501
b8fffdb40c0c425500b8fffd40110c0c425502040d0d425503040d0d4255
01b8fffcb40d0d425500b8fffc400b0d0d425505360b0b025505b8ffc0b3
37383405b8ffc0b334353405b8ffc0b330313405b8ffc0b322253405b8ff
c040251517340f051f059f05df05044f05df05f005031f0570058005ff05
040100000a0203250100b8ffc0b337383400b8ffc040153335349f0001c0
00f0000200002000d000e0000400b8fff8b41010025500b8fffa401d0e0e
025500040c0c0255000a0b0b025500140b0b065500081010065500b8fffe
b40d0d065500b8ffffb40c0c065500b8fffc400a0c0c0655004e04475018
2b10f62b2b2b2b2b2b2b2b2b5d71722b2b3cfd3c003f3f3130015d71722b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b3311331183b405bafa4600>PBAAAA+ArialMT AddT42Char 
2 2638 80 <0001008700000626043e002302e2b90013fff2b40b0b425510b8fff2b40b
0b425512b8fff2b40b0b425511b8fff2b40b0b42551db8fffcb40d0d4255
1cb8fffcb40d0d42551bb8fffcb40d0d42551ab8fffcb40d0d42551db8ff
fcb40c0c42551cb8fffcb40c0c42551bb8fffcb40c0c42551ab8fffcb40c
0c42550cb8fffeb40c0c42550db8fffeb40c0c42550eb8fffeb40c0c4255
0fb8fffeb40c0c425513b8fff2b40c0c425510b8fff2b40c0c425512b8ff
f2b40c0c425511b8fff2b40c0c425513b8fff8b40d0d425510b8fff8b40d
0d425512b8fff8b40d0d425511b8fff8b40d0d42550db8fff4b40d0d0655
08b8fff4b40d0d065509b8ffd8404d0b0d342504e404e409e117e52005d5
05f620021708202309181b20090303231e1c06151c0b0b06070106231a19
100ad025019025a025022517171a0e2590110111041010025511180f0f02
5511b8ffec400b0e0e025511140c0c025511b8ffe840170b0b025511020b
0b0655110c1010065511060f0f065511b8fffab40c0c065511b8fff8b40d
0d065511b8015d401e18080c0c4255180e0b0b425518040d0d4255182590
1b011b180f0f02551bb8ffec400b0e0e02551b140c0c02551bb8ffee4011
0b0b02551b040b0b06551b0a101006551bb8fffe400b0d0d06551b0c0f0f
06551bb8fffcb40c0c06551bb8015d4028000233230e0b0b425523080d0d
4255230c0c0c4255232501d000019000a000021f003f004f000300b8fffe
401d0e0e025500100d0d025500100c0c0255000c0b0b025500160b0b0655
00b8fffcb41010065500b8fff440140f0f0655000a0c0c0655000e0d0d06
5500192425b80178b3214750182b2b4ef42b2b2b2b2b2b2b2b2b5d71723c
4dfd2b2b2be410f42b2b2b2b2b2b2b2b2b5ded2b2b2bf42b2b2b2b2b2b2b
2b2b2b5dfd4e456544e67172003f3c3c3c3f3f3c4d10ed10ed1117390111
1239123931304379400e0c141326140c111b01120d151b01002b012b2b81
015d005d2b2b2b012b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b33113315363633321617363332161511231134262623220615112311
342623220606151187a132a66a76971f7eca9eaab3235c3e7094b458644c
813a0426954e5f6258baafb6fd27029d6c5f3a95a4fd9702b27878509a91
fdd9>PBAAAA+ArialMT AddT42Char 
2 3480 81 <00010087000003e6043e001601b140130503061302a810b810e303e713f0
03f6130604b8fff040220b0d347910019810d018e018ff18042008140e14
16121c05070106160d0a0d0e0c0eb8fff8b40d0d42550eb8fff2b40b0b42
550eb8fff4401f0c0c42550e2418401010025518400b0b02550b28101002
550b140e0e02550bb8ffec40110d0d02550b040c0c02550b220b0b02550b
b8fff4400b0b0b06550b14101006550bb8fff9400b0d0d06550b0a0f0f06
550bb8fff640120c0c06550b40333634ff0b01ff0b010b4e18b8ffc0402c
343634b018f018027018a018b018c01804180302331516080d0d4255160e
0b0b4255160c0c0c425516250100b8fff6b41111025500b8fffab4101002
5500b8fffa40170e0e025500040c0c0255000a0b0b025500040b0b065500
b8fffa40110f0f065500020c0c065500040d0d065500b8ffc04012333634
f0000100002000d000e00004004e1710f65d712b2b2b2b2b2b2b2b2b2b3c
fd2b2b2b3cf43c105d712bf65d712b2b2b2b2b2b2b2b2b2b2b2b2bed2b2b
2b3c103c003f3c3f3fed11390112393130437940160611090a080a070a03
06102611060e1b010f0a121b01002b012b2b2a81015d71002b5d71331133
153633321616171615112311342626232206151187a275dd60a150100ab4
2a6b4873a7042697af45704d327dfd7302866e6d4192ccfdbc00>PBAAAA+ArialMT AddT42Char 
2 3986 82 <00020044ffe80427043e000d001901bfb615180d0d065513b8ffe8b40d0d
06550fb8ffe840650d0d065519180d0d065512070a190c47064808560659
08670669080834103a123a16351845104b124b1645185c055c0952105d12
5d1652186d056d0964106d126d1664187701150906050d5b035405540a5b
0c6c036505650a6c0c0a171c0407111c0b0b14b8fff2b40b0b425514b8ff
f4b40c0c425514b8fff840130d0d425514241b400d0d02551b400b0b0255
07b8ffea40110f0f025507180d0d025507100b0b025507b8fff0b40b0b06
5507b8fff0b40d0d065507b8fff0b40f0f065507b8fff0b40c0c065507b8
ffc0400e2425343007010007100720070307b8fff4400a0d0d42550731df
1b011bb8ffc0406d1e2334301b011b0e080d0d42550e0c0c0c42550e0e0b
0b42550e24000c0e0f025500120d0d0255000c0c0c0255001c0b0b025500
0e0b0b0655000e0d0d0655000c1010065500160c0c065500402425341f00
3f0002000c0d0d4255000c0c0c4255000c0b0b425500311a3437182b10f6
2b2b2b5d2b2b2b2b2b2b2b2b2bed2b2b2b10712b5df62b5d5d2b2b2b2b2b
2b2b2b2b2bed2b2b2b003fed3fed313001715d0071435c58400953055309
6205620904015d59002b2b2b2b1310373633320015140606232200131416
33323635342623220644a489c5db01167beb8bdffeedb9b28786b2b38587
b2021301278e76fee1fdcdeb82011e010dcccbccd1c5cbca>PBAAAA+ArialMT AddT42Char 
2 4520 85 <00010085000002c6043e001100de404d2f13011004012304340443045304
66047404060911080908090d1311090d000308010b1c06070106000a0928
9008010822201301130222110e0b0b425511080d0d4255110c0c0c425511
250100b8ffc04010333634f0000100002000d000e0000400b8fff8b41010
025500b8fff840110e0e025500040c0c025500060b0b025500b8fffcb410
10065500b8fff440160f0f065500060c0c065500080d0d0655004e1247c4
182b10f62b2b2b2b2b2b2b2b5d712b3cfd2b2b2be4105df472e4003f3f3f
ed11393911393901111239390010c9870e7dc43130005d72015d33113315
363633321707262322060706151185a23e693f5b5e3e42423b5e141e0426
a171483aa727473f6072fdd4>PBAAAA+ArialMT AddT42Char 
2 4802 86 <0001003fffe803b1043e003003b14013170e0b0b4255180e0b0b4255190e
0b0b425528b8fff4b40c0c425527b8fff4b40c0c425526b8fff4b40c0c42
5525b8fff4b40c0c425524b8fff4b40c0c425523b8fff4b40c0c425522b8
fff4b40c0c425521b8fff4b40c0c425520b8fff4407f0c0c425504221422
3a094a094424562265227c098e098424a613ab2cc2030d09171a1817304b
2cd617051b025502021032010a185c085c095c0a5c0b5c0c5c0d6a086a09
6a0a6a0b6a0c6a0db426b4270f27262427242936245a0a590b6426642874
2374248024930a9c0c9228972c9530a40aa90ca327a428b326c5261628b8
fff4b40d0d065522b8fff4b40d0d065523b8fff4b40d0d065524b8fff4b4
0d0d065528b8fff4b40c0c065522b8fff4b40c0c065523b8fff4b40c0c06
5524b8fff4b40c0c06551db8ffde40121e395a0827250c0a041a20261504
0b2e1d1ab802aa4022192c0b0b02551f193f194f195f19af19cf19060f19
1f196f19df19041f198f190219bd02550015000002aa0001ffc040140b0b
025510014001021001d00102000110010201b8ffc0b314163401b8ffc040
100e113401012e5c1d6c1d021d1c150704b8fff4b40b0b025504b8ffe6b4
1010065504b8ffe640130f0f0655041c2e0b1f1a011a24194013183432b8
ffc040350f0f025519180f0f025519180d0d025519160c0c025519201010
065519200f0f065519100c0c065519160d0d065519160c0c425519ba025b
0007fff2b60b0b425507242ab8ffc0b51c39d02a012ab8ffe6b40c0c0255
2ab8ffe8b40f0f02552ab8ffe8b40c0c06552ab8ffeab40d0d06552ab8ff
f4b60c0c42552a1a32b8ffc04021272a346032c032023f32803202321001
01012400180d0d025500100d0d06550020b8fff4b40d0d025520b8fff4b4
1010065520b8fff4401f0f0f0655200e0b0b425520240f100b0b02550f16
0c0c02550f200d0d02550fb8fffa40260f0f02550f0e0c0c06550f0c0d0d
06550f060c0c42550f22df00013f004f00020019313437182b4e10f45d71
4df42b2b2b2b2b2b2bed2b2b2b2b102b2bed724e105d712bf62b2b2b2b2b
712b4ded2bf42b2b2b2b2b2b2b2b2b2bed72003fed2b2b2b3fed7112392f
2b2b5d71722be410fd5d71722be411123911123901111217393130437940
40272d1e2305142c261110121013100306220d201b000928071b01052d07
1b011e14201b00210e231b0022230d0c08290a1b012827090a062b041b00
1f101d1b01002b2b103c103c2b103c103c2b012b2b2b2b2a2b818181002b
2b2b2b2b2b2b2b2b5d71015d72715d002b2b2b2b2b2b2b2b2b012b2b2b13
37161633323635342726272e023534363736363332161617072626232206
151417161716171e02151406062322263fb20f897b7c78352593c6994f41
382a91537dbd5a11b00c73697c6a16162f1b84bf975669c67dcfd9013d1c
6b7265443d2318253249814e4779281f2b487b6718525c5237231c1d130a
2433417c5c5a9f57ac00>PBAAAA+ArialMT AddT42Char 
2 5892 87 <00010024fff2022a05990017011fb9000cfffeb40c0c42550bb8fffeb40c
0c425508b8fffeb40c0c425507b8fffeb40c0c425506b8fffeb40c0c4255
0ab8ffc0b323263409b8ffc0405323263480190100010c0d0a0103001610
092b0f0a06161c030b0f10220022010d12080d0d4255120e0b0b4255120a
0c0c425512250c01ff070845094560077007800790070400072007a007b0
07c007d0070607b8ffeeb41010025507b8fff4b40f0f025507b8fff2b40e
0e025507b8fff8b40d0d025507b8fff8b40c0c025507b8fffab410100655
07b8fff0400b0f0f065507060c0c065507b8ffe8b40d0d065507ba026a00
180136b166182b10f62b2b2b2b2b2b2b2b2b5d71f4e410ed3cfd2b2b2b3c
10e4f43c003fed3f3cfd3c1139123911333310c93130015d2b2b2b2b2b2b
2b25170623222626351123353311371133152311141616333202101a4c3c
626c2c8484b3b5b5132b281ea19f103e65a202638c01076cfe8d8cfd934d
2c1a>PBAAAA+ArialMT AddT42Char 
2 6254 88 <00010083ffe803e0042600180183b9001affc0400915173402201316340f
b8fff040191214342b1301240813160c0113160b06000a111c030b003316
b8fff8b40d0d425516b8fff2b40b0b425516b8fff4401f0c0c4255162518
17403336341a401010025517281010025517120e0e025517b8ffec400b0d
0d025517040c0c025517b8fff4400b0b0b065517141010065517b8fff840
0b0d0d0655170c0f0f065517b8fff6400d0c0c0655ff1701c01701174e1a
b8ffc04027343634b01af01a02701aa01ab01aff1a041a0c080d0d42550c
0e0b0b42550c0c0c0c42550c2509b8ffc04010333634f0090100092009d0
09e0090409b8fff8b41010025509b8fff840110e0e025509040c0c025509
0a0b0b065509b8fff640160f0f065509020c0c065509020d0d0655094e19
4750182b10f62b2b2b2b2b2b2b5d712bed2b2b2b105d712bf65d712b2b2b
2b2b2b2b2b2b2b2b3cfd2b2b2be4003fed3f3f3c39390111123931304379
401a04100e0d0f0d0206070806080508030610040c1b000d08111b00002b
012b2a2a81005d012b2b2b21350623222626272635113311141716163332
363635113311033f7cd55ea34f100bb40b116e51518e3bb49cb4486d4f35
730292fdb38d314751538f880239fbda>PBAAAA+ArialMT AddT42Char 
2 6720 89 <0001001a000003e80426000a0236b90008fff2400b0b0b4255020e0b0b42
5500b8ffeab40d0d425508b8ffea400b0d0d425502160d0d425500b8fff4
b40c0c425508b8fff0400a0c0c425502100c0c4255b10202435458401705
08000a080601060a0005090805010205240f0f0255052f2bddcd10ddcd11
3333003f3f3f123931301bb7350501002211390ab8ffde400d1139091612
1c340816121c3402b8ffeab3121c3401b8ffeab3121c340ab8ffd840091e
213400281e21340ab8ffe8400922253400162225340ab8ffda407e282e34
0020282e340f0c29002809260a3900350a4800470a560156025908580966
0166026908690978007701770279087809770a870187028603890788088a
099d009809910aac00a20abd00b707b10ac900c50ada00d50aec00e30afb
00f40a2c0a00050a1800160a2800260a370a4f00400a0905401216340540
0b0d34b10602435458400905010008060106000ab8fff4400f0d0d06550a
000c0d0d065500050908b8fff440120d0d0655080501020c0d0d06550205
050c0b1112392fdd2bcd10dd2bcd10cd2bcd2b002f3f3f11123931301b40
370a07080825090a1409090a0003020225010014010100050a0a000a0908
0802020106070a09030001052f0c010c22084040400980090209b8011bb5
400580050205b8011b400920024001220bead2182b10f6ed1a19fd5dfd5d
1a18ede45d11123939123939003f3c103c103c3f3c113987052e2b877dc4
872e182b877dc4593130002b2b01715d2b2b2b2b2b2b2b2b2b2b2b2b005d
59012b2b2b2b2b2b2b2b210133131617363713330101aefe6cbee4251f18
2becb9fe6e0426fd84676f54760288fbda00>PBAAAA+ArialMT AddT42Char 
2 7338 91 <0001000f000003f1042600100201b9000dfff2400b0b0b4255100e0b0b42
5509b8fff2400a0b0b4255030e0b0b4255b1020243545840150f010b0604
02090602060d0a000a0f180f0f02550f2f2b003f3f3f3f11173931301bb7
0f12010f22193906b8ffde405019395a0f96049608990e9a0fc005c006c0
07cb0f090f4016391a031309150d1a1035013a0b81018e0b082f12570459
07590b580e9701980a980bb702b80cc80bca0ecc10da03d509d10ddb10e5
0a1212b10602435458400b0c0012110f180d10065506b8ffe8400e0d1006
550f0600020d000a0a0206003f3c3f3c111239392b2b01111239391b4066
0606030708090901060609050403030b0f0f100e0d0d010f0f0d100b0100
09020d0b030c100a060f020f0a10c600c60902102500091400000903020d
c60d010d250c03140c0c030a090903030206100d0d0c0c000a4f12011249
0d7e0c220a0f6106097e400ab8011bb74006500680060306b80243400e20
037e02224f00010049117cc4182b10f65df4ed1a19fd5dfd1a18ed10e510
f4ede65d003f3c103c103c3f3c103c103c87052e2b5d877dc4872e182b5d
7d10c400111239390f0f8708c4870e10c408c4870e10c4c408c4070e103c
3c083c59313001435c58b40e181d390bb8ffde400b1d390c221739032217
390bb8ffdeb2213910b8ffc0400a15390122213909401c392b2b2b2b2b2b
2b2b595d71002b5d2b2b015d592b2b2b2b33010133171617363737330101
230327010f0184fe99e1a32e1c2c25b3d7fe91018bddda3afee9022801fe
f947304233fbfe0cfdce014a59fe5d00>PBAAAA+ArialMT AddT42Char 
1 0 0 <00020100000005000500000300070000211121112521112101000400fc20
03c0fc400500fb002004c000>PBAAAA+ArialMT AddT42Char 
PBAAAA+ArialMT /CharStrings get begin
/g3 3 def
/g8 8 def
/g13 13 def
/g16 16 def
/g19 19 def
/g20 20 def
/g21 21 def
/g24 24 def
/g26 26 def
/g27 27 def
/g29 29 def
/g30 30 def
/g37 37 def
/g48 48 def
/g49 49 def
/g50 50 def
/g51 51 def
/g53 53 def
/g55 55 def
/g58 58 def
/g68 68 def
/g70 70 def
/g71 71 def
/g72 72 def
/g73 73 def
/g74 74 def
/g75 75 def
/g76 76 def
/g78 78 def
/g79 79 def
/g80 80 def
/g81 81 def
/g82 82 def
/g85 85 def
/g86 86 def
/g87 87 def
/g88 88 def
/g89 89 def
/g91 91 def
end
PBAAAA+ArialMT /Encoding get
dup 32 /g3 put
dup 37 /g8 put
dup 42 /g13 put
dup 45 /g16 put
dup 48 /g19 put
dup 49 /g20 put
dup 50 /g21 put
dup 53 /g24 put
dup 55 /g26 put
dup 56 /g27 put
dup 58 /g29 put
dup 59 /g30 put
dup 66 /g37 put
dup 77 /g48 put
dup 78 /g49 put
dup 79 /g50 put
dup 80 /g51 put
dup 82 /g53 put
dup 84 /g55 put
dup 87 /g58 put
dup 97 /g68 put
dup 99 /g70 put
dup 100 /g71 put
dup 101 /g72 put
dup 102 /g73 put
dup 103 /g74 put
dup 104 /g75 put
dup 105 /g76 put
dup 107 /g78 put
dup 108 /g79 put
dup 109 /g80 put
dup 110 /g81 put
dup 111 /g82 put
dup 114 /g85 put
dup 115 /g86 put
dup 116 /g87 put
dup 117 /g88 put
dup 118 /g89 put
dup 120 /g91 put
pop
end
%ADOEndSubsetFont
/BHMLJS+ArialMT /PBAAAA+ArialMT findfont ct_VMDictPut
/BHMLJS+ArialMT*1 
[32{/.notdef}rp /g3 4{/.notdef}rp /g8 4{/.notdef}rp /g13 2{/.notdef}rp /g16 
2{/.notdef}rp /g19 /g20 /g21 2{/.notdef}rp /g24 /.notdef /g26 
/g27 /.notdef /g29 /g30 6{/.notdef}rp /g37 10{/.notdef}rp /g48 
/g49 /g50 /g51 /.notdef /g53 /.notdef /g55 2{/.notdef}rp 
/g58 9{/.notdef}rp /g68 /.notdef /g70 /g71 /g72 /g73 
/g74 /g75 /g76 /.notdef /g78 /g79 /g80 /g81 
/g82 2{/.notdef}rp /g85 /g86 /g87 /g88 /g89 /.notdef 
/g91 135{/.notdef}rp]
BHMLJS+ArialMT nf
BHMLJS+ArialMT*1 [4.76801 0 0 -4.477 0 0 ]msf
88.0625 7.29498 mo
(Box Plot of Time)
[3.36148 2.87988 2.39831 1.38272 3.36147 1.43994 2.87988 1.43993 1.43994 2.87988 1.43993 1.43993 
3.36141 1.43993 4.26256 0 ]xsh
98.1427 14.675 mo
(10v*18c)
[2.87988 2.87988 2.34109 1.91678 2.87987 2.87988 0 ]xsh
48.3423 22.055 mo
(Median; Box: 25%-75%; Whisker: Non-Outlier Range)
[4.31978 2.87988 2.87987 1.43994 2.87988 2.81789 1.43994 1.43994 3.36147 2.87988 2.39831 1.43993 
1.43994 2.87987 2.87988 4.25786 1.4399 2.87988 2.87988 4.31985 1.43994 1.43994 4.26259 2.87988 
1.43993 1.92151 1.9215 2.87988 1.4399 1.38272 1.43994 3.35667 2.87988 2.87987 1.4399 3.84302 
2.87988 1.43993 1.43994 1.37794 2.87988 1.4399 1.43994 3.35667 2.87988 2.87988 2.81787 0 
]xsh
.469 lw
1 lc
0 lj
10 ml
[] 0 dsh
true sadj
163.182 132.335 mo
165.102 132.335 li
165.102 130.475 li
163.182 130.475 li
cp
@
BHMLJS+ArialMT*1 [4.76801 0 0 -4.477 0 0 ]msf
166.963 133.115 mo
( Median )
[1.43994 4.26256 2.87987 2.87988 1.43994 2.87987 2.81789 0 ]xsh
162.223 140.015 mo
166.423 140.015 li
166.423 135.215 li
162.223 135.215 li
cp
1 /0 /CSD get_res sepcs
0 sep
ef
1 lj
162.223 140.015 mo
166.423 140.015 li
166.423 135.215 li
162.223 135.215 li
cp
.487739 .830472 .744137 .732662 cmyk
@
1 /0 /CSD get_res sepcs
1 sep
BHMLJS+ArialMT*1 [4.76801 0 0 -4.477 0 0 ]msf
166.963 139.235 mo
( 25%-75% )
[1.43994 2.81789 2.87987 4.31985 1.4399 2.87988 2.81789 4.31985 0 ]xsh
162.223 141.395 mo
166.423 141.395 li
@
166.423 146.195 mo
162.223 146.195 li
@
164.323 141.395 mo
164.323 146.195 li
@
BHMLJS+ArialMT*1 [4.76801 0 0 -4.477 0 0 ]msf
166.963 145.415 mo
( Non-Outlier Range )
[1.43994 3.29945 2.87988 2.87987 1.4399 3.84302 2.81789 1.43994 1.43994 1.43994 2.87987 1.4399 
1.43994 3.35667 2.87988 2.87987 2.87987 2.8179 0 ]xsh
165.103 149.855 mo
165.103 149.375 164.682 148.955 164.143 148.955 cv
163.603 148.955 163.182 149.375 163.182 149.855 cv
163.182 150.395 163.603 150.755 164.143 150.755 cv
164.682 150.755 165.103 150.395 165.103 149.855 cv
cp
@
BHMLJS+ArialMT*1 [4.76801 0 0 -4.477 0 0 ]msf
166.963 151.595 mo
( Outliers)
[1.43994 3.78102 2.87988 1.43993 1.43994 1.43994 2.87987 1.43991 0 ]xsh
.06 lw
165.163 156.395 mo
163.243 156.395 li
165.163 156.395 li
cp
@
164.203 157.295 mo
164.203 155.435 li
cp
@
163.182 155.375 mo
163.663 155.855 li
@
165.103 155.375 mo
164.623 155.855 li
@
163.182 157.235 mo
163.663 156.755 li
@
165.103 157.235 mo
164.623 156.755 li
@
%ADOBeginSubsetFont: PBAAAA+ArialMT AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal PBAAAA+ArialMT gcheck setglobal} if
1 6952 40 <000100a2000004e805ba000b00b4401506051e080807070003041e020102
0a091e0b000807b8ffc0402f1012340754034a200a200d020a1a0d040902
0c0c4255090e0b0b4255090a0c0d425509200120000100201010025500b8
fff6b40f0f025500b8fff6b40d0d025500b8fffab40c0c025500b8fffab4
0909025500b8fffab40c0c065500b8fff0400a0d0d0655005d0c3b5b182b
4e10f42b2b2b2b2b2b2b5d3c4dfd2b2b2b3c4e10f65d4df4e42b003f3cfd
3c3f3cfd3c12392f3c10fd3c3130331121152111211521112115a20424fc
9e032bfcd5038405baadfe3facfe0dad>PBAAAA+ArialMT AddT42Char 
PBAAAA+ArialMT /CharStrings get begin
/g40 40 def
end
PBAAAA+ArialMT /Encoding get
dup 69 /g40 put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/BHMLJS+ArialMT*1 
[32{/.notdef}rp /g3 4{/.notdef}rp /g8 4{/.notdef}rp /g13 2{/.notdef}rp /g16 
2{/.notdef}rp /g19 /g20 /g21 2{/.notdef}rp /g24 /.notdef /g26 
/g27 /.notdef /g29 /g30 6{/.notdef}rp /g37 2{/.notdef}rp /g40 
7{/.notdef}rp /g48 /g49 /g50 /g51 /.notdef /g53 /.notdef 
/g55 2{/.notdef}rp /g58 9{/.notdef}rp /g68 /.notdef /g70 /g71 
/g72 /g73 /g74 /g75 /g76 /.notdef /g78 /g79 
/g80 /g81 /g82 2{/.notdef}rp /g85 /g86 /g87 /g88 
/g89 /.notdef /g91 135{/.notdef}rp]
BHMLJS+ArialMT nf
BHMLJS+ArialMT*1 [4.76801 0 0 -4.477 0 0 ]msf
166.963 157.715 mo
( Extremes)
[1.43994 3.29948 2.39832 1.4447 1.43991 2.87987 4.31978 2.81789 0 ]xsh
11.5625 144.815 mo
159.882 144.815 li
159.882 26.6748 li
11.5625 26.6748 li
cp
1 /0 /CSD get_res sepcs
0 sep
f
11.5027 133.655 mo
159.343 133.655 li
1 /0 /CSD get_res sepcs
.148 sep
@
grestore
gsave
11.5027 123.035 mo
159.463 123.035 li
159.463 122.915 li
11.5027 122.915 li
cp
clp
.06 lw
1 lc
1 lj
10 ml
[] 0 dsh
true sadj
11.4426 122.915 mo
159.343 122.915 li
false sop
1 /0 /CSD get_res sepcs
.148 sep
@
grestore
.06 lw
1 lc
1 lj
10 ml
[] 0 dsh
true sadj
11.5027 112.235 mo
159.343 112.235 li
false sop
1 /0 /CSD get_res sepcs
.148 sep
@
11.5027 101.555 mo
159.343 101.555 li
@
11.5027 90.8148 mo
159.343 90.8148 li
@
11.5027 80.1348 mo
159.343 80.1348 li
@
11.5027 69.4551 mo
159.343 69.4551 li
@
11.5027 58.715 mo
159.343 58.715 li
@
11.5027 48.035 mo
159.343 48.035 li
@
11.5027 37.355 mo
159.343 37.355 li
@
.469 lw
70.6027 101.015 mo
70.6027 69.4551 li
1 /0 /CSD get_res sepcs
1 sep
@
67.6625 101.015 mo
70.6027 101.015 li
@
67.6625 69.4551 mo
70.6027 69.4551 li
@
73.5426 101.015 mo
70.6027 101.015 li
@
73.5426 69.4551 mo
70.6027 69.4551 li
@
64.7227 82.8352 mo
76.5426 82.8352 li
76.5426 69.4551 li
64.7227 69.4551 li
cp
1 /0 /CSD get_res sepcs
0 sep
ef
64.7227 82.8352 mo
76.5426 82.8352 li
76.5426 69.4551 li
64.7227 69.4551 li
cp
.487739 .830472 .744137 .732662 cmyk
@
100.182 133.115 mo
100.182 129.335 li
1 /0 /CSD get_res sepcs
1 sep
@
97.2426 133.115 mo
100.182 133.115 li
@
97.2426 129.335 mo
100.182 129.335 li
@
103.182 133.115 mo
100.182 133.115 li
@
103.182 129.335 mo
100.182 129.335 li
@
94.3027 132.575 mo
106.123 132.575 li
106.123 130.955 li
94.3027 130.955 li
cp
1 /0 /CSD get_res sepcs
0 sep
ef
94.3027 132.575 mo
106.123 132.575 li
106.123 130.955 li
94.3027 130.955 li
cp
.487739 .830472 .744137 .732662 cmyk
@
0 lj
71.8027 76.9551 mo
69.8824 76.9551 li
69.8824 78.8148 li
71.8027 78.8148 li
cp
100.963 130.955 mo
99.0426 130.955 li
99.0426 132.815 li
100.963 132.815 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
1 lj
71.8027 47.375 mo
71.8027 46.895 71.3227 46.475 70.8426 46.475 cv
70.3027 46.475 69.8824 46.895 69.8824 47.375 cv
69.8824 47.915 70.3027 48.335 70.8426 48.335 cv
71.3227 48.335 71.8027 47.915 71.8027 47.375 cv
cp
@
71.8027 45.575 mo
71.8027 45.035 71.3227 44.615 70.8426 44.615 cv
70.3027 44.615 69.8824 45.035 69.8824 45.575 cv
69.8824 46.055 70.3027 46.475 70.8426 46.475 cv
71.3227 46.475 71.8027 46.055 71.8027 45.575 cv
cp
@
71.8027 39.575 mo
71.8027 39.035 71.3227 38.615 70.8426 38.615 cv
70.3027 38.615 69.8824 39.035 69.8824 39.575 cv
69.8824 40.055 70.3027 40.475 70.8426 40.475 cv
71.3227 40.475 71.8027 40.055 71.8027 39.575 cv
cp
@
71.8027 39.995 mo
71.8027 39.515 71.3227 39.095 70.8426 39.095 cv
70.3027 39.095 69.8824 39.515 69.8824 39.995 cv
69.8824 40.535 70.3027 40.955 70.8426 40.955 cv
71.3227 40.955 71.8027 40.535 71.8027 39.995 cv
cp
@
100.963 127.715 mo
100.963 127.175 100.543 126.815 100.003 126.815 cv
99.4625 126.815 99.0426 127.175 99.0426 127.715 cv
99.0426 128.195 99.4625 128.615 100.003 128.615 cv
100.543 128.615 100.963 128.195 100.963 127.715 cv
cp
@
100.963 128.195 mo
100.963 127.655 100.543 127.235 100.003 127.235 cv
99.4625 127.235 99.0426 127.655 99.0426 128.195 cv
99.0426 128.675 99.4625 129.095 100.003 129.095 cv
100.543 129.095 100.963 128.675 100.963 128.195 cv
cp
@
100.963 126.335 mo
100.963 125.795 100.543 125.375 100.003 125.375 cv
99.4625 125.375 99.0426 125.795 99.0426 126.335 cv
99.0426 126.815 99.4625 127.235 100.003 127.235 cv
100.543 127.235 100.963 126.815 100.963 126.335 cv
cp
@
11.5027 144.335 mo
159.343 144.335 li
@
11.5027 143.435 mo
11.5027 144.335 li
@
41.0227 143.435 mo
41.0227 144.335 li
@
70.6027 143.435 mo
70.6027 144.335 li
@
100.182 143.435 mo
100.182 144.335 li
@
129.763 143.435 mo
129.763 144.335 li
@
159.343 143.435 mo
159.343 144.335 li
@
%ADOBeginSubsetFont: PBAAAA+ArialMT AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal PBAAAA+ArialMT gcheck setglobal} if
1 7382 47 <000100960000042a05ba00050082400c010204031e05000820040104b802
a74021070203020c0c4255030e0b0b4255030a0c0d425503200120000100
201010025500b8fff6b40f0f025500b8fff6b40d0d025500b8fffab40c0c
025500b8fff6b40c0c065500b8fff8400a0d0d0655005d063b5c182b10f6
2b2b2b2b2b2b5d3cfd2b2b2b3c10e65d003f3cfd3c3f3130331133112115
96c202d205bafaf3ad00>PBAAAA+ArialMT AddT42Char 
1 10282 54 <0001005cffe704eb05d3003002c5b90027fff8b40d0d425526b8fff8b40d
0d425525b8fff840170d0d425518100c0c425519100c0c42551a100c0c42
550db8ffe8b40b0b42550cb8ffe8b40b0b42550bb8ffe8b40b0b42551cb8
ffe8b40b0b42551bb8ffe8403d0b0b425503180b0b425502180b0b425501
180b0b425563036304730374040425273503391c430349074c1d451f4424
4627530359075c1d572889130e23b8fff2b41010025524b8fff2b4101002
5525b8fff2b41010025526b8fff2b41010025527b8fff2b41010025523b8
fff6b40d10025524b8fff6b40d10025525b8fff6b40d10025526b8fff6b4
0d10025527b8fff640460d100255280d26240224032725360f3423442545
2f5a20562355256c0b6a0d6b0e66146518790b7a0d7a0f7d107524732586
038a0b890d8a0f8d1085248325920d960f96151eb10602435458402d2126
121b261a09262901260000291a120432312600650002000d2d791b891b02
1b25160d2d1e27250125051605b8fff4400c0c0c0655051e2d091e1e1603
003fed3fed2b1112395d1112391112395d1112395d01111217392fed2fed
2fed2fed1b402d25240e0d0b05211c1d1e1b08070604030206012524220e
0d0b06051e1b2d1a400c0c02558f1a011aed16002d01b8ffc040120c0c02
551001200150016001700190010601b801b0400e2d1e1e1603051e2d091b
261a4a09b8fff4b40c0c425509b8fff2b40b0b425509b8fff8400a0d0d42
55092600290129b8ffeab40e0e025529b8fff4401f0c0c0255291a32210c
0c0c4255210e0b0b425521080d0d4255212612012612b8ffecb40e0e0255
12b8fff6b40d0d025512b8fff8400f0c0c02551254200001001931635b18
2b4e10f45d4de42b2b2bed10ed2b2b2b4e10f62b2b5d4ded2b2b2bf4ed00
3fed3fed10fd5d2be410fd5d2bf411121739111739111239390112173959
3130005d712b2b2b2b2b2b2b2b2b2b015d712b2b2b2b2b2b2b2b2b2b2b00
2b2b2b13371e023332363635342627262427262635343636333216161707
2626232206151417160417161615140606232224265cb70d5fc87d6faa53
505c3bfe6c5169677ef294a3f98605ba0fada9b0a1393801d958807a86fb
9dc7fef39901d7106e8d5742734445672317612b37a3656fc16469cc810e
8b8e815b4f33336b283bb57675cf7374e900>PBAAAA+ArialMT AddT42Char 
PBAAAA+ArialMT /CharStrings get begin
/g47 47 def
/g54 54 def
end
PBAAAA+ArialMT /Encoding get
dup 76 /g47 put
dup 83 /g54 put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/BHMLJS+ArialMT*1 
[32{/.notdef}rp /g3 4{/.notdef}rp /g8 4{/.notdef}rp /g13 2{/.notdef}rp /g16 
2{/.notdef}rp /g19 /g20 /g21 2{/.notdef}rp /g24 /.notdef /g26 
/g27 /.notdef /g29 /g30 6{/.notdef}rp /g37 2{/.notdef}rp /g40 
6{/.notdef}rp /g47 /g48 /g49 /g50 /g51 /.notdef /g53 
/g54 /g55 2{/.notdef}rp /g58 9{/.notdef}rp /g68 /.notdef /g70 
/g71 /g72 /g73 /g74 /g75 /g76 /.notdef /g78 
/g79 /g80 /g81 /g82 2{/.notdef}rp /g85 /g86 /g87 
/g88 /g89 /.notdef /g91 135{/.notdef}rp]
BHMLJS+ArialMT nf
BHMLJS+ArialMT*1 [4.76801 0 0 -4.477 0 0 ]msf
57.0426 150.695 mo
(S)sh
%ADOBeginSubsetFont: PBAAAA+Arial-Identity-H Initial
Adobe_CoolType_Utility begin ct_MakeOCF begin ct_saveCIDInit
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2015 Adobe System Incorporated. All rights reserved.
%%DocumentNeededResources: ProcSet (CIDInit)
%%IncludeResource: ProcSet (CIDInit)
%%BeginResource: CIDFont (PBAAAA+Arial)
%%Title: (PBAAAA+Arial Adobe Identity 0)
%%Version: 0
/CIDInit /ProcSet findresource begin
14 dict begin
/CIDFontName /PBAAAA+Arial def
/CIDFontType 0 def
/CIDSystemInfo 3 dict dup begin
/Registry (Adobe) def
/Ordering (Identity) def
/Supplement 0 def
end def
/FontBBox {-665 -325 2000 1040} def
/FontInfo 4 dict dup begin
/FSType 8 def
end def
/CIDMapOffset 57 def
/FDBytes 1 def
/GDBytes 1 def
/CIDCount 4100 def
/CDevProc {pop pop pop pop pop 0 -1000 7 index 2 div 880} def
/FDArray 1 array
dup 0
%ADOBeginFontDict
4 dict dup begin
/FontType 1 def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
%ADOBeginPrivateDict
/Private 7 dict dup begin
/BlueValues [0 0] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/SubrMapOffset 0 def
/SDBytes 1 def
/SubrCount 5 def
end def
%ADOEndPrivateDict
end put
%ADOEndFontDict
def
/GlyphDirectory 3 dict def
ct_GlyphDirProcs begin
GlyphDirectory
+
0 <001C60D8A8C9B6E3FA5101D97F0BCF44F7161DEB1E2A84766DD477E7C8A93
6AA182F5809A9> |
54 <001C60D8A8C9B64EDFE3D078722A65C31955939D63AA5C8A4945719B5E55
8E3B73A676CC12D1E18D93A8DC67C074D6E352D426981DE76F8EC4CFE5DAE051
BE47753A7C234C4B8D7D9F50292A61882B5500CC701F878FE626CDC6D4C322BB
391537921D673F5AEE3EC19E36E7EFEC0F06A0EA4EAAB6BBA94DDCD11A6A564B
13B510F8C915848233B82F046D854DCD4F1639F149305DC73D3C68DF8AEB47A9
6A30E55CF8BAD07FA2825BCE0D675F1CC2EBE61B07B772130E23119250F1EBF8
FE12A2098D9F09F3F21BDC41666CA4A0BB70D5F0A750B44BB93A5FBFDD2BF8DE
450B277265536F77D5BD6F44FB72FF2E708C60107653AE44BFFB26AFF8> |
39 <001C60D8A8C9B6079F6249419CF69509002AC79A016C34D114AD8C7A9DD2
474EBE314027FB7E1F48C795DC0A22C11652551956D26D402DBF3954D5C55EED
C4D2E02D32263ABBF714C52111C5848A3EB8C8B527B0FF3362F75E292ACAF797
67633E5CF98F1E087651E36E4721AF4CBDAC7E4D68359E9108BDBBEA294A0489
068CBF65F37E7CD4C7284AEAF641D010DF> |
!
end
ct_AddStdCIDMap
%%EndResource
ct_restoreCIDInit /PBAAAA+Arial-Identity-H /Identity-H 0 [/PBAAAA+Arial] ct_ComposeFont pop end end
%ADOEndSubsetFont
/BHMLJT+Arial /PBAAAA+Arial-Identity-H findfont ct_VMDictPut
BHMLJT+Arial [4.76801 0 0 -4.477 0 0 ]msf
60.2229 150.695 mo
(\0006\000')
[3.18029 0 ]xsh
BHMLJS+ArialMT*1 [4.76801 0 0 -4.477 0 0 ]msf
67.1931 150.695 mo
( )sh
68.6332 150.695 mo
(- Time)
[1.4399 1.43993 3.36141 1.43993 4.26257 0 ]xsh
87.2819 156.695 mo
(SP)
[3.36148 0 ]xsh
94.0045 156.695 mo
(L - Time)
[2.87988 1.43993 1.4399 1.43994 3.30419 1.43993 4.31978 0 ]xsh
gsave
0 .0310059 mo
0 160 li
435.898 160 li
435.898 .0310059 li
cp
clp
11.5027 26.615 mo
159.343 26.615 li
@
11.5027 27.575 mo
11.5027 26.615 li
@
41.0227 27.575 mo
41.0227 26.615 li
@
70.6027 27.575 mo
70.6027 26.615 li
@
100.182 27.575 mo
100.182 26.615 li
@
129.763 27.575 mo
129.763 26.615 li
@
159.343 27.575 mo
159.343 26.615 li
@
11.5027 144.335 mo
11.5027 26.615 li
@
12.4625 144.335 mo
11.5027 144.335 li
@
12.4625 133.655 mo
11.5027 133.655 li
@
12.4625 122.915 mo
11.4426 122.915 li
@
12.4625 112.235 mo
11.5027 112.235 li
@
12.4625 101.555 mo
11.5027 101.555 li
@
12.4625 90.8148 mo
11.5027 90.8148 li
@
12.4625 80.1352 mo
11.5027 80.1352 li
@
12.4625 69.4551 mo
11.5027 69.4551 li
@
12.4625 58.715 mo
11.5027 58.715 li
@
12.4625 48.035 mo
11.5027 48.035 li
@
12.4625 37.355 mo
11.5027 37.355 li
@
12.4625 26.615 mo
11.5027 26.615 li
@
%ADOBeginSubsetFont: PBAAAA+ArialMT AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal PBAAAA+ArialMT gcheck setglobal} if
1 2854 23 <0002001a0000041005ba000a000d01b7b9000cfffa40ac0c0c42550d060c
0c4255050c0c0c4255060c0c0c4255090c0c0c42550a0c0c0c4255050e0b
0b4255060e0b0b4255090e0b0b42550a0e0b0b425507080c0c425508080c
0c425507080b0b425508080b0b425507080d0d425508080d0d425505080d
0d425506080d0d425509080d0d42550a080d0d425512580c680c9a0ca90c
c90c054c034c0d94040312010208000c060307050a0b0307000c0c0d0dca
030414030304030d00020c0d040703bb02bb0008000201a0400a00040400
0c0c00ca0a04b80266b705050a401d1f340ab8ffe0b4101002550ab8ffe6
b40d0d02550ab8ffeeb40d0d06550ab80137400d07402223340780213507
900f02b8ffc0400b0d14340002100220020302b8ffe0b40d0d025502b8ff
e4b60d0d065502b50eb8018cb18b182b10ec2b2b5d2b10f62b2bf42b2b2b
2b3c10e610fd3c003f3f10f43cf63c1139390111123939872e2b047d10c4
0f0f0f313001435c58b9000dffdeb212390db8ffd4400b333903222d3903
041d1d3c2b2b2b2b595d005d435c5840140c400b390c8050390c4026390c
221c390c402d392b2b2b2b2b59012b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b002b21112135013311331523110311010296fd84029d93c6c6b4fe
35015fa503b6fc4aa5fea102040295fd6b00>PBAAAA+ArialMT AddT42Char 
1 3960 25 <0002004dffe7041505c0001d002a0203b90012fff0b40c0c425511b8fff0
b40c0c425520b8fff4b40c0c425508b8fff4b40c0c425527b8ffe8b40b0b
425523b8ffe840170b0b425521180b0b425507180b0b42550e0c0d0d4255
08b8fff4b40d0d425506b8fff4400a0d0d425507100c0d4255b102024354
58401f0f011f015f0103011b281e400d010d0d14051e1b05221e140d0a1e
01002510b8fff440190d0d0255101e17100f0f025517100c0c0255170c0d
0d0255172f2b2b2bcd2f2bcdd4cd10c5003fed3fed12392f5ded10c45d31
301b402d6b190144074015441944205a1254206b03640764086a12642074
08751c8508861cd608d4161107200d0d065527b8ffe0b40d0d065523b8ff
e0400b0d0d065521200d0d065507b8ffe0b42720232021b8ffe04011281e
400d500d020d0d141b01d35f000100b802684009051e1b05221e140d01b8
0138b200b525b8fff4b40c0c425525b8fff2b40b0b425525b8fff840140d
0d425525731040212334301001001010100210b8fff0b70c0c065510902c
0ab8013840131e0c0c0c42551e0e0b0b42551e080d0d42551eb801394022
3f175f176f177f170417100b0b425517100c0d425517160c0c065517160d
0d065517b80224b32bc78b182b10f62b2b2b2b5ded2b2b2bed10f62b5d71
2bed2b2b2bf4ed003fed3fedfd5de41112392f5ded313001383838382b2b
2b2b015d005d59012b2b2b2b2b2b2b2b2b2b002b2b010726272623220706
060736363332121514060623220011103736333216011416163332363534
2623220603fbb3182c496b564155620241bc67b4fd77d084e1fee49d89e8
adddfd374f8e4e72a4a27b7aaa04530e6a304d303eeedc6360fef7d28aed
7e014b017c01a9c1a8c2fcdd5daa59b89e98afaf>PBAAAA+ArialMT AddT42Char 
PBAAAA+ArialMT /CharStrings get begin
/g23 23 def
/g25 25 def
end
PBAAAA+ArialMT /Encoding get
dup 52 /g23 put
dup 54 /g25 put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/BHMLJS+ArialMT*1 
[32{/.notdef}rp /g3 4{/.notdef}rp /g8 4{/.notdef}rp /g13 2{/.notdef}rp /g16 
2{/.notdef}rp /g19 /g20 /g21 /.notdef /g23 /g24 /g25 
/g26 /g27 /.notdef /g29 /g30 6{/.notdef}rp /g37 2{/.notdef}rp 
/g40 6{/.notdef}rp /g47 /g48 /g49 /g50 /g51 /.notdef 
/g53 /g54 /g55 2{/.notdef}rp /g58 9{/.notdef}rp /g68 /.notdef 
/g70 /g71 /g72 /g73 /g74 /g75 /g76 /.notdef 
/g78 /g79 /g80 /g81 /g82 2{/.notdef}rp /g85 /g86 
/g87 /g88 /g89 /.notdef /g91 135{/.notdef}rp]
BHMLJS+ArialMT nf
BHMLJS+ArialMT*1 [4.76801 0 0 -4.477 0 0 ]msf
1.90269 145.355 mo
(-20)
[1.4399 2.87987 0 ]xsh
6.22233 134.675 mo
(0)sh
3.34257 123.995 mo
(20)
[2.87987 0 ]xsh
3.34257 113.314 mo
(40)
[2.87987 0 ]xsh
3.34257 102.574 mo
(60)
[2.87987 0 ]xsh
3.34257 91.8951 mo
(80)
[2.87987 0 ]xsh
.522446 81.2151 mo
(100)
[2.81789 2.87987 0 ]xsh
.522446 70.4751 mo
(120)
[2.81789 2.87987 0 ]xsh
.522446 59.7961 mo
(140)
[2.81789 2.87987 0 ]xsh
.522446 49.1161 mo
(160)
[2.81789 2.87987 0 ]xsh
.522446 38.3761 mo
(180)
[2.81789 2.87987 0 ]xsh
.522446 27.6961 mo
(200)
[2.81789 2.87987 0 ]xsh
159.343 144.335 mo
159.343 26.615 li
@
158.382 144.335 mo
159.343 144.335 li
@
158.382 133.655 mo
159.343 133.655 li
@
158.382 122.915 mo
159.343 122.915 li
@
158.382 112.235 mo
159.343 112.235 li
@
158.382 101.555 mo
159.343 101.555 li
@
158.382 90.8148 mo
159.343 90.8148 li
@
158.382 80.1352 mo
159.343 80.1352 li
@
158.382 69.4551 mo
159.343 69.4551 li
@
158.382 58.715 mo
159.343 58.715 li
@
158.382 48.035 mo
159.343 48.035 li
@
158.382 37.355 mo
159.343 37.355 li
@
158.382 26.615 mo
159.343 26.615 li
@
224.082 160 mo
436 160 li
436 -1.52588e-5 li
224.082 -1.52588e-5 li
cp
1 /0 /CSD get_res sepcs
0 sep
f
1 /0 /CSD get_res sepcs
1 sep
%ADOBeginSubsetFont: PBAAAA+ArialMT AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal PBAAAA+ArialMT gcheck setglobal} if
1 7178 41 <000100a80000048505ba000900a2403d06051e08088f070107070003041e
0201020008079c2002200b02021a0b0409020c0c4255090e0b0b4255090a
0c0d425509200120000100201010025500b8fff6b40f0f025500b8fff6b4
0d0d025500b8fffa400b0c0c0255000c0b0b065500b8fffeb40c0c065500
b8fff0400a0d0d0655005d0a3b5c182b4e10f42b2b2b2b2b2b2b5d3c4dfd
2b2b2b3c4e10f65d4de4003f3f3cfd3c12392f5d3c10fd3c313033112115
211121152111a803ddfce502b0fd5005baadfe3aadfd6600>PBAAAA+ArialMT AddT42Char 
PBAAAA+ArialMT /CharStrings get begin
/g41 41 def
end
PBAAAA+ArialMT /Encoding get
dup 70 /g41 put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/BHMLJS+ArialMT*1 
[32{/.notdef}rp /g3 4{/.notdef}rp /g8 4{/.notdef}rp /g13 2{/.notdef}rp /g16 
2{/.notdef}rp /g19 /g20 /g21 /.notdef /g23 /g24 /g25 
/g26 /g27 /.notdef /g29 /g30 6{/.notdef}rp /g37 2{/.notdef}rp 
/g40 /g41 5{/.notdef}rp /g47 /g48 /g49 /g50 /g51 
/.notdef /g53 /g54 /g55 2{/.notdef}rp /g58 9{/.notdef}rp /g68 
/.notdef /g70 /g71 /g72 /g73 /g74 /g75 /g76 
/.notdef /g78 /g79 /g80 /g81 /g82 2{/.notdef}rp /g85 
/g86 /g87 /g88 /g89 /.notdef /g91 135{/.notdef}rp]
BHMLJS+ArialMT nf
BHMLJS+ArialMT*1 [4.76801 0 0 -4.477 0 0 ]msf
312.343 7.29496 mo
(Box Plot of Faults)
[3.36148 2.87988 2.39828 1.43994 3.2995 1.43994 2.87988 1.43994 1.43991 2.87988 1.43994 1.43994 
2.87982 2.87988 2.8179 1.43994 1.43991 0 ]xsh
323.143 14.675 mo
(10v*18c)
[2.87988 2.87985 2.34109 1.91678 2.87988 2.87988 0 ]xsh
273.343 22.055 mo
(Median; Box: 25%-75%; Whisker: Non-Outlier Range)
[4.31976 2.87988 2.87988 1.43994 2.87985 2.8179 1.43994 1.43994 3.36148 2.87988 2.39828 1.43994 
1.43994 2.87988 2.87985 4.25787 1.43991 2.87985 2.87988 4.31985 1.43994 1.43994 4.2626 2.87985 
1.43994 1.92151 1.92151 2.87988 1.43991 1.38269 1.43994 3.35669 2.87988 2.87988 1.43988 3.84302 
2.87988 1.43994 1.43994 1.37793 2.87988 1.43988 1.43994 3.35669 2.87988 2.87988 2.81787 0 
]xsh
0 lj
388.182 132.335 mo
390.102 132.335 li
390.102 130.475 li
388.182 130.475 li
cp
@
BHMLJS+ArialMT*1 [4.76801 0 0 -4.477 0 0 ]msf
391.963 133.115 mo
( Median )
[1.43994 4.26254 2.87988 2.87988 1.43994 2.87985 2.8179 0 ]xsh
387.223 140.015 mo
391.423 140.015 li
391.423 135.215 li
387.223 135.215 li
cp
1 /0 /CSD get_res sepcs
0 sep
ef
1 lj
387.223 140.015 mo
391.423 140.015 li
391.423 135.215 li
387.223 135.215 li
cp
.487739 .830472 .744137 .732662 cmyk
@
1 /0 /CSD get_res sepcs
1 sep
BHMLJS+ArialMT*1 [4.76801 0 0 -4.477 0 0 ]msf
391.963 139.235 mo
( 25%-75% )
[1.43994 2.81787 2.87988 4.31985 1.43991 2.87985 2.8179 4.31985 0 ]xsh
387.223 141.395 mo
391.423 141.395 li
@
391.423 146.195 mo
387.223 146.195 li
@
389.323 141.395 mo
389.323 146.195 li
@
BHMLJS+ArialMT*1 [4.76801 0 0 -4.477 0 0 ]msf
391.963 145.415 mo
( Non-Outlier Range )
[1.43994 3.29947 2.87985 2.87988 1.43991 3.84302 2.81787 1.43994 1.43994 1.43994 2.87985 1.43991 
1.43994 3.35669 2.87985 2.87988 2.87988 2.81787 0 ]xsh
390.103 149.855 mo
390.103 149.375 389.682 148.955 389.143 148.955 cv
388.603 148.955 388.182 149.375 388.182 149.855 cv
388.182 150.395 388.603 150.755 389.143 150.755 cv
389.682 150.755 390.103 150.395 390.103 149.855 cv
cp
@
BHMLJS+ArialMT*1 [4.76801 0 0 -4.477 0 0 ]msf
391.963 151.595 mo
( Outliers)
[1.43994 3.78104 2.87985 1.43994 1.43994 1.43994 2.87988 1.43988 0 ]xsh
.06 lw
390.163 156.395 mo
388.243 156.395 li
390.163 156.395 li
cp
@
389.203 157.295 mo
389.203 155.435 li
cp
@
388.182 155.375 mo
388.663 155.855 li
@
390.103 155.375 mo
389.623 155.855 li
@
388.182 157.235 mo
388.663 156.755 li
@
390.103 157.235 mo
389.623 156.755 li
@
BHMLJS+ArialMT*1 [4.76801 0 0 -4.477 0 0 ]msf
391.963 157.715 mo
( Extremes)
[1.43994 3.2995 2.39828 1.44473 1.43988 2.87988 4.31976 2.8179 0 ]xsh
234.163 144.815 mo
384.883 144.815 li
384.883 26.6748 li
234.163 26.6748 li
cp
1 /0 /CSD get_res sepcs
0 sep
f
234.103 131.255 mo
384.343 131.255 li
1 /0 /CSD get_res sepcs
.148 sep
@
234.103 118.175 mo
384.343 118.175 li
@
234.103 105.095 mo
384.343 105.095 li
@
234.103 92.0148 mo
384.343 92.0148 li
@
234.103 78.9348 mo
384.343 78.9348 li
@
234.103 65.8551 mo
384.343 65.8551 li
@
234.103 52.775 mo
384.343 52.775 li
@
234.103 39.695 mo
384.343 39.695 li
@
.469 lw
294.223 131.255 mo
294.223 86.7949 li
1 /0 /CSD get_res sepcs
1 sep
@
291.163 131.255 mo
294.223 131.255 li
@
291.163 86.7949 mo
294.223 86.7949 li
@
297.163 131.255 mo
294.223 131.255 li
@
297.163 86.7949 mo
294.223 86.7949 li
@
288.163 128.615 mo
300.223 128.615 li
300.223 107.735 li
288.163 107.735 li
cp
1 /0 /CSD get_res sepcs
0 sep
ef
288.163 128.615 mo
300.223 128.615 li
300.223 107.735 li
288.163 107.735 li
cp
.487739 .830472 .744137 .732662 cmyk
@
324.223 131.255 mo
324.223 131.255 li
1 /0 /CSD get_res sepcs
1 sep
@
321.223 131.255 mo
324.223 131.255 li
@
321.223 131.255 mo
324.223 131.255 li
@
327.223 131.255 mo
324.223 131.255 li
@
327.223 131.255 mo
324.223 131.255 li
@
318.223 131.255 mo
330.282 131.255 li
318.223 131.255 li
1 /0 /CSD get_res sepcs
0 sep
ef
318.223 131.255 mo
330.282 131.255 li
318.223 131.255 li
cp
.487739 .830472 .744137 .732662 cmyk
@
0 lj
295.363 119.855 mo
293.443 119.855 li
293.443 121.715 li
295.363 121.715 li
cp
325.003 130.475 mo
323.082 130.475 li
323.082 132.335 li
325.003 132.335 li
cp
1 /0 /CSD get_res sepcs
1 sep
@
.06 lw
295.423 42.395 mo
293.503 42.395 li
295.423 42.395 li
cp
@
294.463 43.295 mo
294.463 41.435 li
cp
@
293.443 41.375 mo
293.923 41.855 li
@
295.363 41.375 mo
294.882 41.855 li
@
293.443 43.235 mo
293.923 42.815 li
@
295.363 43.235 mo
294.882 42.815 li
@
325.063 107.915 mo
323.143 107.915 li
325.063 107.915 li
cp
@
324.103 108.815 mo
324.103 107.015 li
cp
@
323.082 106.955 mo
323.563 107.375 li
@
325.003 106.955 mo
324.523 107.375 li
@
323.082 108.815 mo
323.563 108.335 li
@
325.003 108.815 mo
324.523 108.335 li
@
325.063 107.915 mo
323.143 107.915 li
325.063 107.915 li
cp
@
324.103 108.815 mo
324.103 107.015 li
cp
@
323.082 106.955 mo
323.563 107.375 li
@
325.003 106.955 mo
324.523 107.375 li
@
323.082 108.815 mo
323.563 108.335 li
@
325.003 108.815 mo
324.523 108.335 li
@
.469 lw
1 lj
234.103 144.335 mo
384.343 144.335 li
@
234.103 143.435 mo
234.103 144.335 li
@
264.163 143.435 mo
264.163 144.335 li
@
294.223 143.435 mo
294.223 144.335 li
@
324.223 143.435 mo
324.223 144.335 li
@
354.282 143.435 mo
354.282 144.335 li
@
384.343 143.435 mo
384.343 144.335 li
@
grestore
BHMLJS+ArialMT*1 [4.76801 0 0 -4.477 0 0 ]msf
279.882 150.695 mo
(S)sh
BHMLJT+Arial [4.76801 0 0 -4.477 0 0 ]msf
283.062 150.695 mo
(\0006\000')
[3.1803 0 ]xsh
BHMLJS+ArialMT*1 [4.76801 0 0 -4.477 0 0 ]msf
289.973 150.695 mo
( )sh
291.411 150.695 mo
(- Faults)
[1.43991 1.43994 2.87982 2.87988 2.82266 1.43994 1.43991 0 ]xsh
310.603 156.695 mo
(SP)
[3.36148 0 ]xsh
317.324 156.695 mo
(L - Faults)
[2.87988 1.43994 1.43988 1.43994 2.82263 2.87988 2.87985 1.43994 1.43994 0 ]xsh
234.103 26.615 mo
384.343 26.615 li
@
234.103 27.575 mo
234.103 26.615 li
@
264.163 27.575 mo
264.163 26.615 li
@
294.223 27.575 mo
294.223 26.615 li
@
324.223 27.575 mo
324.223 26.615 li
@
354.282 27.575 mo
354.282 26.615 li
@
384.343 27.575 mo
384.343 26.615 li
@
234.103 144.335 mo
234.103 26.615 li
@
235.063 144.335 mo
234.103 144.335 li
@
235.063 131.255 mo
234.103 131.255 li
@
235.063 118.175 mo
234.103 118.175 li
@
235.063 105.095 mo
234.103 105.095 li
@
235.063 92.0148 mo
234.103 92.0148 li
@
235.063 78.9348 mo
234.103 78.9348 li
@
235.063 65.8551 mo
234.103 65.8551 li
@
235.063 52.775 mo
234.103 52.775 li
@
235.063 39.695 mo
234.103 39.695 li
@
235.063 26.615 mo
234.103 26.615 li
@
%ADOBeginSubsetFont: PBAAAA+ArialMT AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal PBAAAA+ArialMT gcheck setglobal} if
1 2288 22 <00010056ffe6041605c0002b01b4b603180c0c425505b8ffe8b40c0c4255
05b8ffe8b30d0d4255b10202435458400b1918400d0d0255181c0001b8ff
c0402b0c0d02550129230a0d0f0c0f1e0a0a29151e1c041e291c05290d23
0d0c181901001220100c0c0255200726b8ffe8b40c0d0255262f2bcd2f2b
cd2fcd2fcd2f0012393f3f10ed10ed12392fedc610c6123910c42b3210c4
2b3231301b4028050d160d450d860d0445115711761b0352166c106a1464
16750d7914860d8a14891ba50d0a052003b8ffe0400b0b0c0d0e04070123
0d0c01b802a4b340000100bb01180029000d0135b40c0c150418ba02a400
1902684009151e1c05041e290d12b8fff4b40c0c425512b8fff2b40b0b42
5512b8fff840140d0d425512735f206f200220180d0d0655208007b8fff4
b40c0c425507b8fff2b40b0b425507b8fff840140d0d4255077326402123
34302601002610260226b8fff4b70d0d065526902d18b80138b219d301ba
01380000ffc0400b212334200040000200902cb80192b18b182b10f65d2b
edf4ed10f62b5d712bed2b2b2bf42b5ded2b2b2b003fed3fedfde4111239
2fed10fd5de411123901111217393130013838015d005d017159012b2b2b
133716163332363534262322073716333236353426232206072736363332
161615140607161615140023222656b41f956b7fafa27d334c14120b73b8
866a698c14b421eaae78ca6b66648290fee8d6c1ff0183189987b0827ca1
149e02787d6382848420b5c767b2645f9c2e1ebd8ec0fef5e600>PBAAAA+ArialMT AddT42Char 
PBAAAA+ArialMT /CharStrings get begin
/g22 22 def
end
PBAAAA+ArialMT /Encoding get
dup 51 /g22 put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/BHMLJS+ArialMT*1 
[32{/.notdef}rp /g3 4{/.notdef}rp /g8 4{/.notdef}rp /g13 2{/.notdef}rp /g16 
2{/.notdef}rp /g19 /g20 /g21 /g22 /g23 /g24 /g25 
/g26 /g27 /.notdef /g29 /g30 6{/.notdef}rp /g37 2{/.notdef}rp 
/g40 /g41 5{/.notdef}rp /g47 /g48 /g49 /g50 /g51 
/.notdef /g53 /g54 /g55 2{/.notdef}rp /g58 9{/.notdef}rp /g68 
/.notdef /g70 /g71 /g72 /g73 /g74 /g75 /g76 
/.notdef /g78 /g79 /g80 /g81 /g82 2{/.notdef}rp /g85 
/g86 /g87 /g88 /g89 /.notdef /g91 135{/.notdef}rp]
BHMLJS+ArialMT nf
BHMLJS+ArialMT*1 [4.76801 0 0 -4.477 0 0 ]msf
227.382 145.355 mo
(-5)
[1.4399 0 ]xsh
228.822 132.335 mo
(0)sh
228.822 119.255 mo
(5)sh
226.002 106.115 mo
(10)
[2.81789 0 ]xsh
226.002 93.0951 mo
(15)
[2.81789 0 ]xsh
226.002 80.0151 mo
(20)
[2.81789 0 ]xsh
226.002 66.9351 mo
(25)
[2.81789 0 ]xsh
226.002 53.8551 mo
(30)
[2.81789 0 ]xsh
226.002 40.7751 mo
(35)
[2.81789 0 ]xsh
226.002 27.6951 mo
(40)
[2.81789 0 ]xsh
384.343 144.335 mo
384.343 26.615 li
@
383.382 144.335 mo
384.343 144.335 li
@
383.382 131.255 mo
384.343 131.255 li
@
383.382 118.175 mo
384.343 118.175 li
@
383.382 105.095 mo
384.343 105.095 li
@
383.382 92.0148 mo
384.343 92.0148 li
@
383.382 78.9348 mo
384.343 78.9348 li
@
383.382 65.8551 mo
384.343 65.8551 li
@
383.382 52.775 mo
384.343 52.775 li
@
383.382 39.695 mo
384.343 39.695 li
@
383.382 26.615 mo
384.343 26.615 li
@
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 /1 ]]
[/CSD [/0 ]]
] del_res
/BHMLJT+Arial-Identity-H uf
/BHMLJT+Arial /CIDFont ur
/BHMLJS+ArialMT*1 uf
/BHMLJS+ArialMT uf
/PBAAAA+ArialMT uf
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/restore_mysetup gx
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
